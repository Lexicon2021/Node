{"version":3,"sources":["webpack://scribble/webpack/universalModuleDefinition","webpack://scribble/webpack/bootstrap","webpack://scribble/./src/utils.ts","webpack://scribble/./src/chord.ts","webpack://scribble/./src/scale.ts","webpack://scribble/./src/clip.ts","webpack://scribble/./node_modules/jsmidgen/lib/jsmidgen.js","webpack://scribble/./node_modules/@tonaljs/core/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/abc-notation/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/array/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/collection/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/pcset/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/chord-type/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/chord-detect/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/scale-type/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/chord/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/duration-value/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/interval/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/midi/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/note/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/roman-numeral/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/key/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/mode/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/progression/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/range/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/scale/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/time-signature/dist/index.es.js","webpack://scribble/./node_modules/@tonaljs/tonal/dist/index.es.js","webpack://scribble/./src/index.ts","webpack://scribble/./src/browserClip.ts","webpack://scribble/./src/progression.ts","webpack://scribble/./src/arp.ts","webpack://scribble/./src/midi.ts","webpack://scribble/external \"fs\"","webpack://scribble/(webpack)/buildin/module.js","webpack://scribble/./src/session.ts","webpack://scribble/./src/channel.ts","webpack://scribble/./src/max.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__11__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNote","str","test","expandStr","JSON","stringify","split","replace","parse","shuffle","arr","lastIndex","length","forEach","el","idx","rnd","Math","round","random","sizzleMap","maxLevel","pi","PI","piArr","piArrRev","reverse","concat","map","element","sin","pickOne","dice","flat","reduce","acc","val","tonal_1","utils_1","chordTypes","ChordType","all","chordNames","aliases","filter","Boolean","getChord","Error","spl","tokenizedName","Chord","tokenize","chordName","numericalChords","TypeError","chord","rootInOctave","intervals","interval","note","Note","transpose","simplify","chords","addChord","abbrev","add","getScale","tonicOctScale","toLowerCase","scaleName","Scale","ScaleType","notes","scales","names","__assign","this","assign","arguments","apply","chord_1","browserClip","hdr","convertChordsToNotes","Array","isArray","clip","params","pattern","sizzle","sizzleReps","arpegiate","subdiv","amp","accentLow","randomNotes","effects","offlineRendering","synth","instrument","sample","buffer","player","samples","sampler","clipNotes","step","recursivelyApplyPatternToNotes","patternArr","char","push","level","volArr","style","beats","stepLevel","abs","accent","a","_i","clipNotes_1","clipNote","exported","DEFAULT_VOLUME","Util","DEFAULT_DURATION","DEFAULT_CHANNEL","midi_letter_pitches","b","e","f","g","midiPitchFromNote","matches","exec","accidental","parseInt","substr","ensureMidiPitch","midi_pitches_letter","midi_flattened_notes","noteFromMidiPitch","returnFlattened","noteName","octave","noteNum","floor","indexOf","mpqnFromBpm","bpm","mpqn","ret","unshift","bpmFromMpqn","codes2Str","byteArray","String","fromCharCode","str2Bytes","finalBytes","bytes","chars","translateTickTime","ticks","bList","MidiEvent","type","undefined","channel","param1","setTime","time","setType","setChannel","setParam1","setParam2","param2","NOTE_OFF","NOTE_ON","AFTER_TOUCH","CONTROLLER","PROGRAM_CHANGE","CHANNEL_AFTERTOUCH","PITCH_BEND","toBytes","typeChannelByte","MetaEvent","setData","data","SEQUENCE","TEXT","COPYRIGHT","TRACK_NAME","INSTRUMENT","LYRIC","MARKER","CUE_POINT","CHANNEL_PREFIX","END_OF_TRACK","TEMPO","SMPTE","TIME_SIG","KEY_SIG","SEQ_EVENT","dataBytes","x","charCodeAt","Track","config","events","START_BYTES","END_BYTES","addEvent","event","addNoteOn","noteOn","pitch","velocity","addNoteOff","noteOff","addNote","dur","index","setInstrument","setTempo","tempo","trackLength","eventBytes","startBytes","endBytes","lengthBytes","toString","File","tracks","HDR_CHUNKID","HDR_CHUNK_SIZE","HDR_TYPE0","HDR_TYPE1","addTrack","track","trackCount","Event","Midi","fillStr","join","deprecate","original","alternative","fn","args","console","warn","isNamed","src","isPitch","alt","FIFTHS","STEPS_TO_OCTS","fifths","encode","oct","dir","FIFTHS_TO_STEPS","decode","coord","unaltered","NoNote","empty","pc","cache","Map","stepToLetter","charAt","altToAcc","accToAlt","cached","tokens","tokenizeNote","letter","octStr","chroma","SEMI","height","midi","freq","pow","props","pitchName","set","REGEX","toUpperCase","coordToNote","noteCoord","NoInterval","REGEX$1","RegExp","tokenizeInterval","cache$1","num","q","simple","qToAlt","semitones","SIZES","parse$1","altToQ","pitchName$1","coordToInterval","intervalName","note$1","interval$1","intervalCoord","distance","fromNote","toNote","from","to","fcoord","tcoord","character","times","abcToScientificNotation","scientificToAbcNotation","range","ascR","descR","rotate","len","slice","compact","sortedNoteNames","sort","sortedUniqNoteNames","permutations","perm","pos","newPerm","splice","EmptyPcset","setNum","normalized","setNumToChroma","Number","chromaToNumber","isChroma","binary","listToChroma","isPcset","normalizedNum","_","chromaRotations","chromaToIntervals","chromaToPcset","IVLS","modes","normalize","isSubsetOf","isSupersetOf","isNoteIncludedIn","chromas","isEqual","s1","s2","isIncluded","pcset","NoChordType","quality","dictionary","entries","fullName","has","getQuality","alias","addAlias","ivls","symbols","removeAll","keys","chordType","NotFound","weight","detect","source","tonic","tonicChroma","pcToName","record","namedSet","allModes","baseNote","findExactMatches","NoScaleType","scale","scaleType","NoChord","symbol","rootDegree","NaN","NUM_TYPES","typeName","optionalTonic","optionalRoot","rootInterval","chordScales","isChordIncluded","extended","isSuperset","reduced","isSubset","VALUES","denominator","shorthand","dots","fraction","NoDuration","base","find","includes","numerator","calcDots","duration","IN","IQ","combinator","substract","coordA","coordB","fromSemitones","invert","addTo","other","isMidi","arg","toMidi","L2","log","L440","freqToMidi","v","SHARPS","FLATS","midiToNoteName","options","isNaN","Infinity","sharps","pitchClass","midiToFreq","tuning","NAMES","toName","onlyNotes","array","tr","transposeBy","trBy","transposeFrom","trFrom","transposeFifths","nFifths","nOcts","trFifths","ascending","sortedNames","comparator","sortedUniqNames","nameBuilder","enharmonic","sameAccidentals","accidentals","descending","fromMidi","fromMidiSharps","fromFreq","fromFreqSharps","NoRomanNumeral","roman","upperRoman","major","romanNumeral","ROMANS","NAMES_MINOR","Empty","freeze","NoKey","alteration","keySignature","NoKeyScale","grades","chordsHarmonicFunction","NoMajorKey","minorRelative","secondaryDominants","secondaryDominantsMinorRelative","substituteDominants","substituteDominantsMinorRelative","NoMinorKey","relativeMajor","natural","harmonic","melodic","mapScaleToType","list","sep","harmonicFunctions","gr","distInFifths","MajorScale","NaturalScale","HarmonicScale","MelodicScale","majorKey","keyScale","romanInTonic","majorTonicFromKeySignature","sig","minorKey","tnc","NoMode","modeNum","triad","seventh","fromRomanNumerals","rn","toRomanNumerals","numeric","result","last","chromatic","NoScale","substring","st","modeNames","tonics","modeName","scaleChords","inScale","scaleNotes","NONE","upper","lower","additive","CACHE","literal","up","low","down","ts","build","Tonal","PcSet","ChordDictionary","ScaleDictionary","scale_1","clip_1","progression_1","getChordDegrees","getChordsByProgression","progression","arp_1","arp","midi_1","session_1","Session","max_1","max","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","next","rejected","done","then","__generator","body","y","label","sent","trys","ops","verb","iterator","op","pop","getNote","counter","getDuration","durations","getSeqFn","Tone","Player","start","PolySynth","Sampler","triggerAttackRelease","NoiseSynth","recursivelyApplyPatternToDurations","generateSequence","context","_a","getContext","Ticks","toSeconds","eff","recreateToneObjectInContext","toDestination","url","volume","chain","Sequence","callback","subdivision","totalPatternDuration","subdivOrLength","renderingDuration","patternRegularNotesCount","patternRandomNotesCount","patternNotesCount","notesCount","n1","n2","smallest","largest","leastCommonMultiple","originalContext","ongoingRenderingCounter","toneObject","_dummyVoice","_buffer","paramsFromSampler","attack","curve","release","paramsFromBuffers","baseUrl","_buffers","urls","fromEntries","loop","Offline","sequence","loaded","transport","_b","setContext","offlineRenderingCallback","sync","offlineRenderClip","theRomans","ionian","dorian","phrygian","lydian","mixolydian","aeolian","locrian","minor","idxByDegree","ii","iii","iv","vi","vii","noteOctaveScale","chordDegress","noteOctaveScaleArr","match","prefix","getChordName","scaleId","getProgFactory","T","D","count","M","__spreadArrays","il","k","j","jl","fillArr","bumpOctave","arr1","arr2","chordsOrParams","finalArr","order","_loop_1","filledArr","reorderedArr","chordsArr_1","_loop_2","__importDefault","mod","__importStar","fs_1","jsmidgen","fileName","createFileFromNotes","endsWith","URL","createObjectURL","createDownloadLink","default","writeFileSync","Uint8Array","ascii","blob","Blob","link","document","createElement","href","download","innerText","file","notes_1","noteObj","webpackPolyfill","paths","children","channel_1","sessionChannels","ch","Channel","createChannel","newChannel","configurable","startRow","startClip","play","_this","channelPatterns","clipDuration","clipDurationInSeconds","Time","stopClips","clips","stop","channelIdx","prevClipIdx","clipIdx","channels","startClips","__rest","getOwnPropertySymbols","propertyIsEnumerable","getNextPos","Transport","position","activePatternIdx","channelClips","originalParamsFiltered","addClip","stopClip","state","clipParams","jsmidgen_1","liveClip","liveObject","LiveAPI","totalLength","noteCount","cursor","toFixed"],"mappings":"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","file":"scribbletune.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"fs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"scribble\"] = factory(require(\"fs\"));\n\telse\n\t\troot[\"scribble\"] = factory(root[\"fs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__11__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Take a string input and check if it s a note name or not\n * @param  {String} str Note name e.g. c4\n * @return {Boolean} Return true for c4 or return false for something like CM\n */\nexports.isNote = function (str) {\n    return /^[a-gA-G](?:#|b)?\\d$/.test(str);\n};\n/**\n * Take a String input such as xxx[xx[xx]]\n * and return an Array as ['x', 'x', 'x', ['x', 'x', ['x', 'x']]]\n * @param  {String} str\n * @return {Array}\n */\nexports.expandStr = function (str) {\n    str = JSON.stringify(str.split(''));\n    str = str.replace(/,\"\\[\",/g, ', [');\n    str = str.replace(/\"\\[\",/g, '[');\n    str = str.replace(/,\"\\]\"/g, ']');\n    return JSON.parse(str);\n};\n/**\n * Basic Array randomizer\n * @param  {Array} arr\n * @return {Array}\n */\nexports.shuffle = function (arr) {\n    var lastIndex = arr.length - 1;\n    arr.forEach(function (el, idx) {\n        var rnd = Math.round(Math.random() * lastIndex);\n        arr[idx] = arr[rnd];\n        arr[rnd] = el;\n    });\n    return arr;\n};\n/**\n * Return an array of numbers relative to maxLevel || 127 ordered in a Sine wave format\n * This is used by the `sizzle` param of the `clip` method to add a rudimentary variation to the accent of each note\n * @param {Number} maxLevel A number between not more than 127\n * @return {Array}  Example output [63, 90, 110, 127, 110, 90, 63, 0, 63, 90, 110, 127, 110, 90, 63, 0]\n */\nexports.sizzleMap = function (maxLevel) {\n    if (maxLevel === void 0) { maxLevel = 127; }\n    var pi = Math.PI;\n    var piArr = [\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n        pi,\n    ];\n    var piArrRev = [\n        0,\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n    ];\n    piArrRev.reverse();\n    var arr = piArr.concat(piArrRev);\n    return arr.map(function (element) { return Math.round(Math.sin(element) * maxLevel); });\n};\n/**\n * Pick one item randomly from an array and return it\n * @param arr\n */\nexports.pickOne = function (arr) {\n    return arr.length > 1 ? arr[Math.round(Math.random())] : arr[0];\n};\n/**\n * Boolean generator\n */\nexports.dice = function () { return !!Math.round(Math.random()); };\n/**\n * Polyfill for Array.prototype.flat\n */\nexports.flat = function (arr) {\n    return arr.reduce(function (acc, val) { return acc.concat(val); }, []);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tonal_1 = require(\"@tonaljs/tonal\");\nvar utils_1 = require(\"./utils\");\nvar chordTypes = tonal_1.ChordType.all();\nvar chordNames = utils_1.flat(chordTypes.map(function (t) { return t.aliases.concat([t.name]); })).filter(Boolean);\n/**\n * Derive a chord from the given string. Exposed as simply `chord` in Scribbletune\n * @return {Array}     [example `chord('CM')` outputs: ['c4', 'e4', 'g4'], `chord('CM-5')` outputs: ['c5', 'e5', 'g5']]\n */\nexports.getChord = function (name) {\n    if (utils_1.isNote(name)) {\n        throw new Error(name + \" is not a chord!\");\n    }\n    // Separate the octave from the chord\n    var spl = name.split('-'); // e.g. CMaj7-4 => ['CMaj7', '4'];\n    // tonal doesnt recognize 5 and below in the `tokenize` method,\n    // hence explicitly massage those out\n    var tokenizedName = tonal_1.Chord.tokenize(spl[0]); // e.g. ['C', 'Maj7']\n    var root = tokenizedName[0];\n    var chordName = tokenizedName[1];\n    if (root[1] === '4' || root[1] === '5') {\n        chordName = root[1];\n        root = root.replace(/\\d/, '');\n    }\n    // Since chords like C5 can also qualify for the note C5,\n    // Scribbletune treats such chords with the `th` appended to it\n    var numericalChords = {\n        '4th': '4',\n        '5th': '5',\n        '7th': '7',\n        '9th': '9',\n        '11th': '11',\n        '13th': '13',\n    };\n    if (numericalChords[chordName]) {\n        chordName = numericalChords[chordName];\n    }\n    if (!tonal_1.ChordType.get(chordName)) {\n        throw new TypeError('Invalid chord name: ' + chordName);\n    }\n    var chord = tonal_1.Chord.get(root + chordName);\n    var rootInOctave = root + (spl[1] || 4);\n    return (chord.intervals || []).map(function (interval) {\n        var note = tonal_1.Note.transpose(rootInOctave, interval);\n        return tonal_1.Note.simplify(note);\n    });\n};\n/**\n * Get a list of chords available in Scribbletune.\n * @return {Array}     [example output: ['maj', 'min', 'dim']]\n */\nexports.chords = function () {\n    // Since chords like C5 can also qualify for the note C5,\n    // Scribbletune treats such chords with the `th` appended to it\n    var numericalChords = {\n        '4': '4th',\n        '5': '5th',\n        '7': '7th',\n        '9': '9th',\n        '11': '11th',\n        '13': '13th',\n    };\n    return chordNames.map(function (c) {\n        if (/^\\d+$/.test(c) && numericalChords[c]) {\n            return numericalChords[c];\n        }\n        else {\n            return c;\n        }\n    });\n};\n/**\n * Adds a chord to Tonal's chord collection, so getChord can access it.\n * @param  {<Array>String} intervals e.g. ['1P', '3M', '5P']\n * @param  {<Array>String} abbrev e.g. ['Q', 'T']\n * @param  {String} name e.g. full\n * @return {void}\n */\nexports.addChord = function (intervals, abbrev, name) {\n    tonal_1.ChordType.add(intervals, abbrev, name);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tonal_1 = require(\"@tonaljs/tonal\");\nexports.getScale = function (tonicOctScale) {\n    tonicOctScale = tonicOctScale && tonicOctScale.toLowerCase();\n    // In Tonal, the only scales that are not entirely lower case are\n    // lydian #5P pentatonic and minor #7M pentatonic,\n    // hence make provision for them separately\n    tonicOctScale = tonicOctScale.replace('#5p', '#5P');\n    tonicOctScale = tonicOctScale.replace('#7m', '#7M');\n    var tokenizedName = tonal_1.Scale.tokenize(tonicOctScale);\n    var scaleName = tokenizedName[1];\n    if (!tonal_1.ScaleType.get(scaleName)) {\n        throw new Error(tonicOctScale + \" does not exist!\");\n    }\n    var scale = tonal_1.Scale.get(tonicOctScale);\n    return scale.notes.map(tonal_1.Note.simplify);\n};\nexports.scales = function () {\n    return tonal_1.Scale.names();\n};\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar chord_1 = require(\"./chord\");\n/* tslint:disable:no-var-requires */\nvar browserClip = typeof window !== 'undefined' && require('./browserClip').browserClip;\n/**\n * Get default params for a clip, such as root note, pattern etc\n * @return {Object}\n */\nvar getDefaultParams = function () { return ({\n    notes: ['C4'],\n    pattern: 'x',\n    shuffle: false,\n    sizzle: false,\n    sizzleReps: 1,\n    arpegiate: false,\n    subdiv: '4n',\n    amp: 100,\n    accentLow: 70,\n    randomNotes: null,\n    effects: [],\n    offlineRendering: false,\n}); };\n/**\n * HDR speed is denoted by the number of ticks per note\n * By default this is set to a quarter note (4n) to be in line with Tone.js' default subdivision\n * Technically a bar is 512 ticks long. So it's HDR speed is 512\n * @type {Object}\n */\nvar hdr = {\n    '1m': 2048,\n    '2m': 4096,\n    '3m': 6144,\n    '4m': 8192,\n    '1n': 512,\n    '2n': 256,\n    '4n': 128,\n    '8n': 64,\n    '16n': 32,\n};\nvar convertChordsToNotes = function (el) {\n    if (utils_1.isNote(el)) {\n        // A note needs to be an array so that it can accomodate chords or single notes with a single interface\n        return [el];\n    }\n    if (Array.isArray(el)) {\n        // This could be a chord provided as an array\n        // make sure it uses valid notes\n        el.forEach(function (n) {\n            if (!utils_1.isNote(n)) {\n                throw new TypeError('array must comprise valid notes');\n            }\n        });\n        return el;\n    }\n    if (!Array.isArray(el)) {\n        var chord = chord_1.getChord(el);\n        if (chord && chord.length) {\n            return chord;\n        }\n    }\n    throw new Error(\"Chord \" + el + \" not found\");\n};\nexports.clip = function (params) {\n    params = __assign(__assign({}, getDefaultParams()), (params || {}));\n    // If notes is a string, split it into an array\n    if (typeof params.notes === 'string') {\n        // Remove any accidental double spaces\n        params.notes = params.notes.replace(/\\s{2,}/g, ' ');\n        params.notes = params.notes.split(' ');\n    }\n    params.notes = params.notes.map(convertChordsToNotes);\n    if (/[^x\\-_\\[\\]R]/.test(params.pattern)) {\n        throw new TypeError(\"pattern can only comprise x - _ [ ], found \" + params.pattern);\n    }\n    if (params.shuffle) {\n        params.notes = utils_1.shuffle(params.notes);\n    }\n    if (params.randomNotes && typeof params.randomNotes === 'string') {\n        params.randomNotes = params.randomNotes.replace(/\\s{2,}/g, ' ').split(/\\s/);\n    }\n    if (params.randomNotes) {\n        params.randomNotes = params.randomNotes.map(convertChordsToNotes);\n    }\n    // If the clip method is being called in the context of a Tone.js instrument or synth,\n    // then there's no need to continue\n    if (params.synth ||\n        params.instrument ||\n        params.sample ||\n        params.buffer ||\n        params.player ||\n        params.samples ||\n        params.sampler) {\n        return browserClip(params);\n    }\n    var clipNotes = [];\n    var step = 0;\n    /**\n     * Recursively apply pattern to notes\n     *\n     * Pass in a pattern array such as ['x', '-', 'x', 'x'] with a length for each element\n     * The length is the HDR speed or tick length (obtained from the hdr object in this script)\n     * If the element of this array is also a (pattern) array, then divide the length by\n     * the length of the inner array and then call the recursive function on that inner array\n     */\n    var recursivelyApplyPatternToNotes = function (patternArr, length) {\n        patternArr.forEach(function (char) {\n            if (typeof char === 'string') {\n                var note = null;\n                // If the note is to be `on`, then it needs to be an array\n                if (char === 'x') {\n                    note = params.notes[step];\n                    step++;\n                }\n                if (char === 'R' && (Math.round(Math.random()) || params.randomNotes)) {\n                    note = params.randomNotes\n                        ? params.randomNotes[Math.round(Math.random() * (params.randomNotes.length - 1))]\n                        : params.notes[step];\n                    step++;\n                }\n                // Push only note on OR off messages to the clip notes array\n                if (char === 'x' || char === '-' || char === 'R') {\n                    clipNotes.push({\n                        note: note,\n                        length: length,\n                        level: char === 'R' && !params.randomNotes\n                            ? params.accentLow\n                            : params.amp,\n                    });\n                }\n                // In case of an underscore, simply extend the previous note's length\n                if (char === '_' && clipNotes.length) {\n                    clipNotes[clipNotes.length - 1].length += length;\n                }\n                // If the pattern is longer than the notes, then repeat notes\n                if (step === params.notes.length) {\n                    step = 0;\n                }\n            }\n            if (Array.isArray(char)) {\n                recursivelyApplyPatternToNotes(char, length / char.length);\n            }\n        });\n    };\n    recursivelyApplyPatternToNotes(utils_1.expandStr(params.pattern), hdr[params.subdiv] || hdr['4n']);\n    // Many thanks to @R1G for the following functionality\n    if (params.sizzle) {\n        var volArr = [];\n        var style = params.sizzle === true ? 'sin' : params.sizzle;\n        var beats = clipNotes.length;\n        var amp = params.amp;\n        var sizzleReps = params.sizzleReps;\n        var stepLevel = amp / (beats / sizzleReps);\n        if (style === 'sin' || style === 'cos') {\n            for (var i = 0; i < beats; i++) {\n                var level = Math[style]((i * Math.PI) / (beats / sizzleReps)) * amp;\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        if (style === 'rampUp') {\n            var level = 0;\n            for (var i = 0; i < beats; i++) {\n                if (i % (beats / sizzleReps) === 0) {\n                    level = 0;\n                }\n                else {\n                    level = level + stepLevel;\n                }\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        if (style === 'rampDown') {\n            var level = amp;\n            for (var i = 0; i < beats; i++) {\n                if (i % (beats / sizzleReps) === 0) {\n                    level = amp;\n                }\n                else {\n                    level = level - stepLevel;\n                }\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        for (var i = 0; i < volArr.length; i++) {\n            clipNotes[i].level = volArr[i] ? volArr[i] : 1; // Cannot allow 0 value on level\n        }\n    }\n    if (params.accent) {\n        if (/[^x\\-]/.test(params.accent)) {\n            throw new TypeError('Accent can only have x and - characters');\n        }\n        var a = 0;\n        for (var _i = 0, clipNotes_1 = clipNotes; _i < clipNotes_1.length; _i++) {\n            var clipNote = clipNotes_1[_i];\n            var level = params.accent[a] === 'x'\n                ? params.amp\n                : params.accentLow;\n            if (params.sizzle) {\n                level = (clipNote.level + level) / 2;\n            }\n            clipNote.level = Math.round(level);\n            // Step to the next character in the accent\n            a = a + 1;\n            // Reset `a` so that it can loop over the accent\n            if (a === params.accent.length) {\n                a = 0;\n            }\n        }\n    }\n    return clipNotes;\n};\n","var Midi = {};\n\n(function(exported) {\n\n\tvar DEFAULT_VOLUME   = exported.DEFAULT_VOLUME   = 90;\n\tvar DEFAULT_DURATION = exported.DEFAULT_DURATION = 128;\n\tvar DEFAULT_CHANNEL  = exported.DEFAULT_CHANNEL  = 0;\n\n\t/* ******************************************************************\n\t * Utility functions\n\t ****************************************************************** */\n\n\tvar Util = {\n\n\t\tmidi_letter_pitches: { a:21, b:23, c:12, d:14, e:16, f:17, g:19 },\n\n\t\t/**\n\t\t * Convert a symbolic note name (e.g. \"c4\") to a numeric MIDI pitch (e.g.\n\t\t * 60, middle C).\n\t\t *\n\t\t * @param {string} n - The symbolic note name to parse.\n\t\t * @returns {number} The MIDI pitch that corresponds to the symbolic note\n\t\t * name.\n\t\t */\n\t\tmidiPitchFromNote: function(n) {\n\t\t\tvar matches = /([a-g])(#+|b+)?([0-9]+)$/i.exec(n);\n\t\t\tvar note = matches[1].toLowerCase(), accidental = matches[2] || '', octave = parseInt(matches[3], 10);\n\t\t\treturn (12 * octave) + Util.midi_letter_pitches[note] + (accidental.substr(0,1)=='#'?1:-1) * accidental.length;\n\t\t},\n\n\t\t/**\n\t\t * Ensure that the given argument is converted to a MIDI pitch. Note that\n\t\t * it may already be one (including a purely numeric string).\n\t\t *\n\t\t * @param {string|number} p - The pitch to convert.\n\t\t * @returns {number} The resulting numeric MIDI pitch.\n\t\t */\n\t\tensureMidiPitch: function(p) {\n\t\t\tif (typeof p == 'number' || !/[^0-9]/.test(p)) {\n\t\t\t\t// numeric pitch\n\t\t\t\treturn parseInt(p, 10);\n\t\t\t} else {\n\t\t\t\t// assume it's a note name\n\t\t\t\treturn Util.midiPitchFromNote(p);\n\t\t\t}\n\t\t},\n\n\t\tmidi_pitches_letter: { '12':'c', '13':'c#', '14':'d', '15':'d#', '16':'e', '17':'f', '18':'f#', '19':'g', '20':'g#', '21':'a', '22':'a#', '23':'b' },\n\t\tmidi_flattened_notes: { 'a#':'bb', 'c#':'db', 'd#':'eb', 'f#':'gb', 'g#':'ab' },\n\n\t\t/**\n\t\t * Convert a numeric MIDI pitch value (e.g. 60) to a symbolic note name\n\t\t * (e.g. \"c4\").\n\t\t *\n\t\t * @param {number} n - The numeric MIDI pitch value to convert.\n\t\t * @param {boolean} [returnFlattened=false] - Whether to prefer flattened\n\t\t * notes to sharpened ones. Optional, default false.\n\t\t * @returns {string} The resulting symbolic note name.\n\t\t */\n\t\tnoteFromMidiPitch: function(n, returnFlattened) {\n\t\t\tvar octave = 0, noteNum = n, noteName, returnFlattened = returnFlattened || false;\n\t\t\tif (n > 23) {\n\t\t\t\t// noteNum is on octave 1 or more\n\t\t\t\toctave = Math.floor(n/12) - 1;\n\t\t\t\t// subtract number of octaves from noteNum\n\t\t\t\tnoteNum = n - octave * 12;\n\t\t\t}\n\n\t\t\t// get note name (c#, d, f# etc)\n\t\t\tnoteName = Util.midi_pitches_letter[noteNum];\n\t\t\t// Use flattened notes if requested (e.g. f# should be output as gb)\n\t\t\tif (returnFlattened && noteName.indexOf('#') > 0) {\n\t\t\t\tnoteName = Util.midi_flattened_notes[noteName];\n\t\t\t}\n\t\t\treturn noteName + octave;\n\t\t},\n\n\t\t/**\n\t\t * Convert beats per minute (BPM) to microseconds per quarter note (MPQN).\n\t\t *\n\t\t * @param {number} bpm - A number in beats per minute.\n\t\t * @returns {number} The number of microseconds per quarter note.\n\t\t */\n\t\tmpqnFromBpm: function(bpm) {\n\t\t\tvar mpqn = Math.floor(60000000 / bpm);\n\t\t\tvar ret=[];\n\t\t\tdo {\n\t\t\t\tret.unshift(mpqn & 0xFF);\n\t\t\t\tmpqn >>= 8;\n\t\t\t} while (mpqn);\n\t\t\twhile (ret.length < 3) {\n\t\t\t\tret.push(0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\t/**\n\t\t * Convert microseconds per quarter note (MPQN) to beats per minute (BPM).\n\t\t *\n\t\t * @param {number} mpqn - The number of microseconds per quarter note.\n\t\t * @returns {number} A number in beats per minute.\n\t\t */\n\t\tbpmFromMpqn: function(mpqn) {\n\t\t\tvar m = mpqn;\n\t\t\tif (typeof mpqn[0] != 'undefined') {\n\t\t\t\tm = 0;\n\t\t\t\tfor (var i=0, l=mpqn.length-1; l >= 0; ++i, --l) {\n\t\t\t\t\tm |= mpqn[i] << l;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Math.floor(60000000 / mpqn);\n\t\t},\n\n\t\t/**\n\t\t * Converts an array of bytes to a string of hexadecimal characters. Prepares\n\t\t * it to be converted into a base64 string.\n\t\t *\n\t\t * @param {Array} byteArray - Array of bytes to be converted.\n\t\t * @returns {string} Hexadecimal string, e.g. \"097B8A\".\n\t\t */\n\t\tcodes2Str: function(byteArray) {\n\t\t\treturn String.fromCharCode.apply(null, byteArray);\n\t\t},\n\n\t\t/**\n\t\t * Converts a string of hexadecimal values to an array of bytes. It can also\n\t\t * add remaining \"0\" nibbles in order to have enough bytes in the array as the\n\t\t * `finalBytes` parameter.\n\t\t *\n\t\t * @param {string} str - string of hexadecimal values e.g. \"097B8A\"\n\t\t * @param {number} [finalBytes] - Optional. The desired number of bytes\n\t\t * (not nibbles) that the returned array should contain.\n\t\t * @returns {Array} An array of nibbles.\n\t\t */\n\t\tstr2Bytes: function (str, finalBytes) {\n\t\t\tif (finalBytes) {\n\t\t\t\twhile ((str.length / 2) < finalBytes) { str = \"0\" + str; }\n\t\t\t}\n\n\t\t\tvar bytes = [];\n\t\t\tfor (var i=str.length-1; i>=0; i = i-2) {\n\t\t\t\tvar chars = i === 0 ? str[i] : str[i-1] + str[i];\n\t\t\t\tbytes.unshift(parseInt(chars, 16));\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t},\n\n\t\t/**\n\t\t * Translates number of ticks to MIDI timestamp format, returning an array\n\t\t * of bytes with the time values. MIDI has a very particular way to express\n\t\t * time; take a good look at the spec before ever touching this function.\n\t\t *\n\t\t * @param {number} ticks - Number of ticks to be translated.\n\t\t * @returns {number} Array of bytes that form the MIDI time value.\n\t\t */\n\t\ttranslateTickTime: function(ticks) {\n\t\t\tvar buffer = ticks & 0x7F;\n\n\t\t\twhile (ticks = ticks >> 7) {\n\t\t\t\tbuffer <<= 8;\n\t\t\t\tbuffer |= ((ticks & 0x7F) | 0x80);\n\t\t\t}\n\n\t\t\tvar bList = [];\n\t\t\twhile (true) {\n\t\t\t\tbList.push(buffer & 0xff);\n\n\t\t\t\tif (buffer & 0x80) { buffer >>= 8; }\n\t\t\t\telse { break; }\n\t\t\t}\n\t\t\treturn bList;\n\t\t},\n\n\t};\n\n\t/* ******************************************************************\n\t * Event class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - channel [required number] - Channel for the event.\n\t *  - param1 [required number] - First event parameter.\n\t *  - param2 [optional number] - Second event parameter.\n\t */\n\tvar MidiEvent = function(params) {\n\t\tif (!this) return new MidiEvent(params);\n\t\tif (params &&\n\t\t\t\t(params.type    !== null || params.type    !== undefined) &&\n\t\t\t\t(params.channel !== null || params.channel !== undefined) &&\n\t\t\t\t(params.param1  !== null || params.param1  !== undefined)) {\n\t\t\tthis.setTime(params.time);\n\t\t\tthis.setType(params.type);\n\t\t\tthis.setChannel(params.channel);\n\t\t\tthis.setParam1(params.param1);\n\t\t\tthis.setParam2(params.param2);\n\t\t}\n\t};\n\n\t// event codes\n\tMidiEvent.NOTE_OFF           = 0x80;\n\tMidiEvent.NOTE_ON            = 0x90;\n\tMidiEvent.AFTER_TOUCH        = 0xA0;\n\tMidiEvent.CONTROLLER         = 0xB0;\n\tMidiEvent.PROGRAM_CHANGE     = 0xC0;\n\tMidiEvent.CHANNEL_AFTERTOUCH = 0xD0;\n\tMidiEvent.PITCH_BEND         = 0xE0;\n\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMidiEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MidiEvent.\n\t *\n\t * @param {number} type - Event type.\n\t */\n\tMidiEvent.prototype.setType = function(type) {\n\t\tif (type < MidiEvent.NOTE_OFF || type > MidiEvent.PITCH_BEND) {\n\t\t\tthrow new Error(\"Trying to set an unknown event: \" + type);\n\t\t}\n\n\t\tthis.type = type;\n\t};\n\n\t/**\n\t * Set the channel for the event. Must be between 0 and 15, inclusive.\n\t *\n\t * @param {number} channel - The event channel.\n\t */\n\tMidiEvent.prototype.setChannel = function(channel) {\n\t\tif (channel < 0 || channel > 15) {\n\t\t\tthrow new Error(\"Channel is out of bounds.\");\n\t\t}\n\n\t\tthis.channel = channel;\n\t};\n\n\t/**\n\t * Set the first parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The first event parameter value.\n\t */\n\tMidiEvent.prototype.setParam1 = function(p) {\n\t\tthis.param1 = p;\n\t};\n\n\t/**\n\t * Set the second parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The second event parameter value.\n\t */\n\tMidiEvent.prototype.setParam2 = function(p) {\n\t\tthis.param2 = p;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMidiEvent.prototype.toBytes = function() {\n\t\tvar byteArray = [];\n\n\t\tvar typeChannelByte = this.type | (this.channel & 0xF);\n\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(typeChannelByte);\n\t\tbyteArray.push(this.param1);\n\n\t\t// Some events don't have a second parameter\n\t\tif (this.param2 !== undefined && this.param2 !== null) {\n\t\t\tbyteArray.push(this.param2);\n\t\t}\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * MetaEvent class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a meta event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - data [optional array|string] - Event data.\n\t */\n\tvar MetaEvent = function(params) {\n\t\tif (!this) return new MetaEvent(params);\n\t\tvar p = params || {};\n\t\tthis.setTime(params.time);\n\t\tthis.setType(params.type);\n\t\tthis.setData(params.data);\n\t};\n\n\tMetaEvent.SEQUENCE   = 0x00;\n\tMetaEvent.TEXT       = 0x01;\n\tMetaEvent.COPYRIGHT  = 0x02;\n\tMetaEvent.TRACK_NAME = 0x03;\n\tMetaEvent.INSTRUMENT = 0x04;\n\tMetaEvent.LYRIC      = 0x05;\n\tMetaEvent.MARKER     = 0x06;\n\tMetaEvent.CUE_POINT  = 0x07;\n\tMetaEvent.CHANNEL_PREFIX = 0x20;\n\tMetaEvent.END_OF_TRACK   = 0x2f;\n\tMetaEvent.TEMPO      = 0x51;\n\tMetaEvent.SMPTE      = 0x54;\n\tMetaEvent.TIME_SIG   = 0x58;\n\tMetaEvent.KEY_SIG    = 0x59;\n\tMetaEvent.SEQ_EVENT  = 0x7f;\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMetaEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MetaEvent.\n\t *\n\t * @param {number} t - Event type.\n\t */\n\tMetaEvent.prototype.setType = function(t) {\n\t\tthis.type = t;\n\t};\n\n\t/**\n\t * Set the data associated with the event. May be a string or array of byte\n\t * values.\n\t *\n\t * @param {string|Array} d - Event data.\n\t */\n\tMetaEvent.prototype.setData = function(d) {\n\t\tthis.data = d;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMetaEvent.prototype.toBytes = function() {\n\t\tif (!this.type) {\n\t\t\tthrow new Error(\"Type for meta-event not specified.\");\n\t\t}\n\n\t\tvar byteArray = [];\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(0xFF, this.type);\n\n\t\t// If data is an array, we assume that it contains several bytes. We\n\t\t// apend them to byteArray.\n\t\tif (Array.isArray(this.data)) {\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tbyteArray.push.apply(byteArray, this.data);\n\t\t} else if (typeof this.data == 'number') {\n\t\t\tbyteArray.push(1, this.data);\n\t\t} else if (this.data !== null && this.data !== undefined) {\n\t\t\t// assume string; may be a bad assumption\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tvar dataBytes = this.data.split('').map(function(x){ return x.charCodeAt(0) });\n\t\t\tbyteArray.push.apply(byteArray, dataBytes);\n\t\t} else {\n\t\t\tbyteArray.push(0);\n\t\t}\n\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * Track class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI track.\n\t *\n\t * Parameters include:\n\t *  - events [optional array] - Array of events for the track.\n\t */\n\tvar Track = function(config) {\n\t\tif (!this) return new Track(config);\n\t\tvar c = config || {};\n\t\tthis.events = c.events || [];\n\t};\n\n\tTrack.START_BYTES = [0x4d, 0x54, 0x72, 0x6b];\n\tTrack.END_BYTES   = [0x00, 0xFF, 0x2F, 0x00];\n\n\t/**\n\t * Add an event to the track.\n\t *\n\t * @param {MidiEvent|MetaEvent} event - The event to add.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addEvent = function(event) {\n\t\tthis.events.push(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The volume for the note, defaults to\n\t * DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOn = Track.prototype.noteOn = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_ON,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOff = Track.prototype.noteOff = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_OFF,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the note, in ticks.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNote = Track.prototype.note = function(channel, pitch, dur, time, velocity) {\n\t\tthis.noteOn(channel, pitch, time, velocity);\n\t\tif (dur) {\n\t\t\tthis.noteOff(channel, pitch, dur, velocity);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track for each pitch in an array of pitches.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {array} chord - An array of pitches, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the chord, in ticks.\n\t * @param {number} [velocity=90] - The velocity of the chord,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addChord = Track.prototype.chord = function(channel, chord, dur, velocity) {\n\t\tif (!Array.isArray(chord) && !chord.length) {\n\t\t\tthrow new Error('Chord must be an array of pitches');\n\t\t}\n\t\tchord.forEach(function(note) {\n\t\t\tthis.noteOn(channel, note, 0, velocity);\n\t\t}, this);\n\t\tchord.forEach(function(note, index) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis.noteOff(channel, note, dur);\n\t\t\t} else {\n\t\t\t\tthis.noteOff(channel, note);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set instrument for the track.\n\t *\n\t * @param {number} channel - The channel to set the instrument on.\n\t * @param {number} instrument - The instrument to set it to.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setInstrument = Track.prototype.instrument = function(channel, instrument, time) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.PROGRAM_CHANGE,\n\t\t\tchannel: channel,\n\t\t\tparam1: instrument,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set the tempo for the track.\n\t *\n\t * @param {number} bpm - The new number of beats per minute.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setTempo = Track.prototype.tempo = function(bpm, time) {\n\t\tthis.events.push(new MetaEvent({\n\t\t\ttype: MetaEvent.TEMPO,\n\t\t\tdata: Util.mpqnFromBpm(bpm),\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Serialize the track to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tTrack.prototype.toBytes = function() {\n\t\tvar trackLength = 0;\n\t\tvar eventBytes = [];\n\t\tvar startBytes = Track.START_BYTES;\n\t\tvar endBytes   = Track.END_BYTES;\n\n\t\tvar addEventBytes = function(event) {\n\t\t\tvar bytes = event.toBytes();\n\t\t\ttrackLength += bytes.length;\n\t\t\teventBytes.push.apply(eventBytes, bytes);\n\t\t};\n\n\t\tthis.events.forEach(addEventBytes);\n\n\t\t// Add the end-of-track bytes to the sum of bytes for the track, since\n\t\t// they are counted (unlike the start-of-track ones).\n\t\ttrackLength += endBytes.length;\n\n\t\t// Makes sure that track length will fill up 4 bytes with 0s in case\n\t\t// the length is less than that (the usual case).\n\t\tvar lengthBytes = Util.str2Bytes(trackLength.toString(16), 4);\n\n\t\treturn startBytes.concat(lengthBytes, eventBytes, endBytes);\n\t};\n\n\t/* ******************************************************************\n\t * File class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a file object.\n\t *\n\t * Parameters include:\n\t *  - ticks [optional number] - Number of ticks per beat, defaults to 128.\n\t *    Must be 1-32767.\n\t *  - tracks [optional array] - Track data.\n\t */\n\tvar File = function(config){\n\t\tif (!this) return new File(config);\n\n\t\tvar c = config || {};\n\t\tif (c.ticks) {\n\t\t\tif (typeof c.ticks !== 'number') {\n\t\t\t\tthrow new Error('Ticks per beat must be a number!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (c.ticks <= 0 || c.ticks >= (1 << 15) || c.ticks % 1 !== 0) {\n\t\t\t\tthrow new Error('Ticks per beat must be an integer between 1 and 32767!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.ticks = c.ticks || 128;\n\t\tthis.tracks = c.tracks || [];\n\t};\n\n\tFile.HDR_CHUNKID     = \"MThd\";             // File magic cookie\n\tFile.HDR_CHUNK_SIZE  = \"\\x00\\x00\\x00\\x06\"; // Header length for SMF\n\tFile.HDR_TYPE0       = \"\\x00\\x00\";         // Midi Type 0 id\n\tFile.HDR_TYPE1       = \"\\x00\\x01\";         // Midi Type 1 id\n\n\t/**\n\t * Add a track to the file.\n\t *\n\t * @param {Track} track - The track to add.\n\t */\n\tFile.prototype.addTrack = function(track) {\n\t\tif (track) {\n\t\t\tthis.tracks.push(track);\n\t\t\treturn this;\n\t\t} else {\n\t\t\ttrack = new Track();\n\t\t\tthis.tracks.push(track);\n\t\t\treturn track;\n\t\t}\n\t};\n\n\t/**\n\t * Serialize the MIDI file to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tFile.prototype.toBytes = function() {\n\t\tvar trackCount = this.tracks.length.toString(16);\n\n\t\t// prepare the file header\n\t\tvar bytes = File.HDR_CHUNKID + File.HDR_CHUNK_SIZE;\n\n\t\t// set Midi type based on number of tracks\n\t\tif (parseInt(trackCount, 16) > 1) {\n\t\t\tbytes += File.HDR_TYPE1;\n\t\t} else {\n\t\t\tbytes += File.HDR_TYPE0;\n\t\t}\n\n\t\t// add the number of tracks (2 bytes)\n\t\tbytes += Util.codes2Str(Util.str2Bytes(trackCount, 2));\n\t\t// add the number of ticks per beat (currently hardcoded)\n\t\tbytes += String.fromCharCode((this.ticks/256),  this.ticks%256);;\n\n\t\t// iterate over the tracks, converting to bytes too\n\t\tthis.tracks.forEach(function(track) {\n\t\t\tbytes += Util.codes2Str(track.toBytes());\n\t\t});\n\n\t\treturn bytes;\n\t};\n\n\t/* ******************************************************************\n\t * Exports\n\t ****************************************************************** */\n\n\texported.Util = Util;\n\texported.File = File;\n\texported.Track = Track;\n\texported.Event = MidiEvent;\n\texported.MetaEvent = MetaEvent;\n\n})( Midi );\n\nif (typeof module != 'undefined' && module !== null) {\n\tmodule.exports = Midi;\n} else if (typeof exports != 'undefined' && exports !== null) {\n\texports = Midi;\n} else {\n\tthis.Midi = Midi;\n}\n","/**\r\n * Fill a string with a repeated character\r\n *\r\n * @param character\r\n * @param repetition\r\n */\r\nconst fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction deprecate(original, alternative, fn) {\r\n    return function (...args) {\r\n        // tslint:disable-next-line\r\n        console.warn(`${original} is deprecated. Use ${alternative}.`);\r\n        return fn.apply(this, args);\r\n    };\r\n}\n\nfunction isNamed(src) {\r\n    return src !== null && typeof src === \"object\" && typeof src.name === \"string\"\r\n        ? true\r\n        : false;\r\n}\n\nfunction isPitch(pitch) {\r\n    return pitch !== null &&\r\n        typeof pitch === \"object\" &&\r\n        typeof pitch.step === \"number\" &&\r\n        typeof pitch.alt === \"number\"\r\n        ? true\r\n        : false;\r\n}\r\n// The number of fifths of [C, D, E, F, G, A, B]\r\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\n// The number of octaves it span each step\r\nconst STEPS_TO_OCTS = FIFTHS.map((fifths) => Math.floor((fifths * 7) / 12));\r\nfunction encode(pitch) {\r\n    const { step, alt, oct, dir = 1 } = pitch;\r\n    const f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined) {\r\n        return [dir * f];\r\n    }\r\n    const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\n// We need to get the steps from fifths\r\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\r\n// We add 1 to fifths to avoid negative numbers, so:\r\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\r\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction decode(coord) {\r\n    const [f, o, dir] = coord;\r\n    const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n    const alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined) {\r\n        return { step, alt, dir };\r\n    }\r\n    const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n    return { step, alt, oct, dir };\r\n}\r\n// Return the number of fifths as if it were unaltered\r\nfunction unaltered(f) {\r\n    const i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\n\nconst NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nconst cache = new Map();\r\nconst stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nconst altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nconst accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nfunction note(src) {\r\n    const cached = cache.get(src);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const value = typeof src === \"string\"\r\n        ? parse(src)\r\n        : isPitch(src)\r\n            ? note(pitchName(src))\r\n            : isNamed(src)\r\n                ? note(src.name)\r\n                : NoNote;\r\n    cache.set(src, value);\r\n    return value;\r\n}\r\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeNote(str) {\r\n    const m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToNote(noteCoord) {\r\n    return note(decode(noteCoord));\r\n}\r\nconst mod = (n, m) => ((n % m) + m) % m;\r\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse(noteName) {\r\n    const tokens = tokenizeNote(noteName);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n        return NoNote;\r\n    }\r\n    const letter = tokens[0];\r\n    const acc = tokens[1];\r\n    const octStr = tokens[2];\r\n    const step = (letter.charCodeAt(0) + 3) % 7;\r\n    const alt = accToAlt(acc);\r\n    const oct = octStr.length ? +octStr : undefined;\r\n    const coord = encode({ step, alt, oct });\r\n    const name = letter + acc + octStr;\r\n    const pc = letter + acc;\r\n    const chroma = (SEMI[step] + alt + 120) % 12;\r\n    const height = oct === undefined\r\n        ? mod(SEMI[step] + alt, 12) - 12 * 99\r\n        : SEMI[step] + alt + 12 * (oct + 1);\r\n    const midi = height >= 0 && height <= 127 ? height : null;\r\n    const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n    return {\r\n        empty: false,\r\n        acc,\r\n        alt,\r\n        chroma,\r\n        coord,\r\n        freq,\r\n        height,\r\n        letter,\r\n        midi,\r\n        name,\r\n        oct,\r\n        pc,\r\n        step,\r\n    };\r\n}\r\nfunction pitchName(props) {\r\n    const { step, alt, oct } = props;\r\n    const letter = stepToLetter(step);\r\n    if (!letter) {\r\n        return \"\";\r\n    }\r\n    const pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\n\nconst NoInterval = { empty: true, name: \"\", acc: \"\" };\r\n// shorthand tonal notation (with quality after number)\r\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\n// standard shorthand notation (with quality before number)\r\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nconst REGEX$1 = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeInterval(str) {\r\n    const m = REGEX$1.exec(`${str}`);\r\n    if (m === null) {\r\n        return [\"\", \"\"];\r\n    }\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nconst cache$1 = {};\r\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/core'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\r\nfunction interval(src) {\r\n    return typeof src === \"string\"\r\n        ? cache$1[src] || (cache$1[src] = parse$1(src))\r\n        : isPitch(src)\r\n            ? interval(pitchName$1(src))\r\n            : isNamed(src)\r\n                ? interval(src.name)\r\n                : NoInterval;\r\n}\r\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nconst TYPES = \"PMMPPMM\";\r\nfunction parse$1(str) {\r\n    const tokens = tokenizeInterval(str);\r\n    if (tokens[0] === \"\") {\r\n        return NoInterval;\r\n    }\r\n    const num = +tokens[0];\r\n    const q = tokens[1];\r\n    const step = (Math.abs(num) - 1) % 7;\r\n    const t = TYPES[step];\r\n    if (t === \"M\" && q === \"P\") {\r\n        return NoInterval;\r\n    }\r\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = \"\" + num + q;\r\n    const dir = num < 0 ? -1 : 1;\r\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    const alt = qToAlt(type, q);\r\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    const coord = encode({ step, alt, oct, dir });\r\n    return {\r\n        empty: false,\r\n        name,\r\n        num,\r\n        q,\r\n        step,\r\n        alt,\r\n        dir,\r\n        type,\r\n        simple,\r\n        semitones,\r\n        chroma,\r\n        coord,\r\n        oct,\r\n    };\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToInterval(coord) {\r\n    const [f, o = 0] = coord;\r\n    const isDescending = f * 7 + o * 12 < 0;\r\n    const ivl = isDescending ? [-f, -o, -1] : [f, o, 1];\r\n    return interval(decode(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n    return (q === \"M\" && type === \"majorable\") ||\r\n        (q === \"P\" && type === \"perfectable\")\r\n        ? 0\r\n        : q === \"m\" && type === \"majorable\"\r\n            ? -1\r\n            : /^A+$/.test(q)\r\n                ? q.length\r\n                : /^d+$/.test(q)\r\n                    ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\r\n                    : 0;\r\n}\r\n// return the interval name of a pitch\r\nfunction pitchName$1(props) {\r\n    const { step, alt, oct = 0, dir } = props;\r\n    if (!dir) {\r\n        return \"\";\r\n    }\r\n    const num = step + 1 + 7 * oct;\r\n    const d = dir < 0 ? \"-\" : \"\";\r\n    const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = d + num + altToQ(type, alt);\r\n    return name;\r\n}\r\nfunction altToQ(type, alt) {\r\n    if (alt === 0) {\r\n        return type === \"majorable\" ? \"M\" : \"P\";\r\n    }\r\n    else if (alt === -1 && type === \"majorable\") {\r\n        return \"m\";\r\n    }\r\n    else if (alt > 0) {\r\n        return fillStr(\"A\", alt);\r\n    }\r\n    else {\r\n        return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n    }\r\n}\n\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/core\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\r\nfunction transpose(noteName, intervalName) {\r\n    const note$1 = note(noteName);\r\n    const interval$1 = interval(intervalName);\r\n    if (note$1.empty || interval$1.empty) {\r\n        return \"\";\r\n    }\r\n    const noteCoord = note$1.coord;\r\n    const intervalCoord = interval$1.coord;\r\n    const tr = noteCoord.length === 1\r\n        ? [noteCoord[0] + intervalCoord[0]]\r\n        : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n    return coordToNote(tr).name;\r\n}\r\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\r\nfunction distance(fromNote, toNote) {\r\n    const from = note(fromNote);\r\n    const to = note(toNote);\r\n    if (from.empty || to.empty) {\r\n        return \"\";\r\n    }\r\n    const fcoord = from.coord;\r\n    const tcoord = to.coord;\r\n    const fifths = tcoord[0] - fcoord[0];\r\n    const octs = fcoord.length === 2 && tcoord.length === 2\r\n        ? tcoord[1] - fcoord[1]\r\n        : -Math.floor((fifths * 7) / 12);\r\n    return coordToInterval([fifths, octs]).name;\r\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, deprecate, distance, encode, fillStr, interval, isNamed, isPitch, note, stepToLetter, tokenizeInterval, tokenizeNote, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, distance as distance$1 } from '@tonaljs/core';\n\nconst fillStr = (character, times) => Array(times + 1).join(character);\r\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\r\nfunction tokenize(str) {\r\n    const m = REGEX.exec(str);\r\n    if (!m) {\r\n        return [\"\", \"\", \"\"];\r\n    }\r\n    return [m[1], m[2], m[3]];\r\n}\r\n/**\r\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\r\n *\r\n * @example\r\n * abcToScientificNotation(\"c\") // => \"C5\"\r\n */\r\nfunction abcToScientificNotation(str) {\r\n    const [acc, letter, oct] = tokenize(str);\r\n    if (letter === \"\") {\r\n        return \"\";\r\n    }\r\n    let o = 4;\r\n    for (let i = 0; i < oct.length; i++) {\r\n        o += oct.charAt(i) === \",\" ? -1 : 1;\r\n    }\r\n    const a = acc[0] === \"_\"\r\n        ? acc.replace(/_/g, \"b\")\r\n        : acc[0] === \"^\"\r\n            ? acc.replace(/\\^/g, \"#\")\r\n            : \"\";\r\n    return letter.charCodeAt(0) > 96\r\n        ? letter.toUpperCase() + a + (o + 1)\r\n        : letter + a + o;\r\n}\r\n/**\r\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\r\n *\r\n * @example\r\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\r\n */\r\nfunction scientificToAbcNotation(str) {\r\n    const n = note(str);\r\n    if (n.empty || !n.oct) {\r\n        return \"\";\r\n    }\r\n    const { letter, acc, oct } = n;\r\n    const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\r\n    const l = oct > 4 ? letter.toLowerCase() : letter;\r\n    const o = oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\r\n    return a + l + o;\r\n}\r\nfunction transpose(note, interval) {\r\n    return scientificToAbcNotation(transpose$1(abcToScientificNotation(note), interval));\r\n}\r\nfunction distance(from, to) {\r\n    return distance$1(abcToScientificNotation(from), abcToScientificNotation(to));\r\n}\r\nvar index = {\r\n    abcToScientificNotation,\r\n    scientificToAbcNotation,\r\n    tokenize,\r\n    transpose,\r\n    distance,\r\n};\n\nexport default index;\nexport { abcToScientificNotation, distance, scientificToAbcNotation, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\n// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} array\r\n * @return {Array} the rotated array\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the array with the null values removed\r\n * @function\r\n * @param {Array} array\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Sort an array of notes in ascending order. Pitch classes are listed\r\n * before notes. Any string that is not a note is removed.\r\n *\r\n * @param {string[]} notes\r\n * @return {string[]} sorted array of notes\r\n *\r\n * @example\r\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\r\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\r\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\r\n * // => ['C', 'F', 'G', 'A', 'B']\r\n */\r\nfunction sortedNoteNames(notes) {\r\n    const valid = notes.map((n) => note(n)).filter((n) => !n.empty);\r\n    return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\r\n}\r\n/**\r\n * Get sorted notes with duplicates removed. Pitch classes are listed\r\n * before notes.\r\n *\r\n * @function\r\n * @param {string[]} array\r\n * @return {string[]} unique sorted notes\r\n *\r\n * @example\r\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\r\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\r\n */\r\nfunction sortedUniqNoteNames(arr) {\r\n    return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} array\r\n * @return {Array} the array shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an array\r\n *\r\n * @param {Array} array - the array\r\n * @return {Array<Array>} an array with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\n\nexport { compact, permutations, range, rotate, shuffle, sortedNoteNames, sortedUniqNoteNames };\n//# sourceMappingURL=index.es.js.map\n","// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} collection\r\n * @return {Array} the rotated collection\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the collection with the null values removed\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array} the collection shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an collection\r\n *\r\n * @param {Array} collection - the collection\r\n * @return {Array<Array>} an collection with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\r\nvar index = {\r\n    compact,\r\n    permutations,\r\n    range,\r\n    rotate,\r\n    shuffle,\r\n};\n\nexport default index;\nexport { compact, permutations, range, rotate, shuffle };\n//# sourceMappingURL=index.es.js.map\n","import { range, compact, rotate } from '@tonaljs/collection';\nimport { deprecate, note, interval } from '@tonaljs/core';\n\nconst EmptyPcset = {\r\n    empty: true,\r\n    name: \"\",\r\n    setNum: 0,\r\n    chroma: \"000000000000\",\r\n    normalized: \"000000000000\",\r\n    intervals: [],\r\n};\r\n// UTILITIES\r\nconst setNumToChroma = (num) => Number(num).toString(2);\r\nconst chromaToNumber = (chroma) => parseInt(chroma, 2);\r\nconst REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n    return REGEX.test(set);\r\n}\r\nconst isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nconst isPcset = (set) => set && isChroma(set.chroma);\r\nconst cache = { [EmptyPcset.chroma]: EmptyPcset };\r\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\r\nfunction get(src) {\r\n    const chroma = isChroma(src)\r\n        ? src\r\n        : isPcsetNum(src)\r\n            ? setNumToChroma(src)\r\n            : Array.isArray(src)\r\n                ? listToChroma(src)\r\n                : isPcset(src)\r\n                    ? src.chroma\r\n                    : EmptyPcset.chroma;\r\n    return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\r\n}\r\n/**\r\n * Use Pcset.properties\r\n * @function\r\n * @deprecated\r\n */\r\nconst pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\r\n/**\r\n * Get pitch class set chroma\r\n * @function\r\n * @example\r\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\r\n */\r\nconst chroma = (set) => get(set).chroma;\r\n/**\r\n * Get intervals (from C) of a set\r\n * @function\r\n * @example\r\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\r\n */\r\nconst intervals = (set) => get(set).intervals;\r\n/**\r\n * Get pitch class set number\r\n * @function\r\n * @example\r\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\r\n */\r\nconst num = (set) => get(set).setNum;\r\nconst IVLS = [\r\n    \"1P\",\r\n    \"2m\",\r\n    \"2M\",\r\n    \"3m\",\r\n    \"3M\",\r\n    \"4P\",\r\n    \"5d\",\r\n    \"5P\",\r\n    \"6m\",\r\n    \"6M\",\r\n    \"7m\",\r\n    \"7M\",\r\n];\r\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\r\nfunction chromaToIntervals(chroma) {\r\n    const intervals = [];\r\n    for (let i = 0; i < 12; i++) {\r\n        // tslint:disable-next-line:curly\r\n        if (chroma.charAt(i) === \"1\")\r\n            intervals.push(IVLS[i]);\r\n    }\r\n    return intervals;\r\n}\r\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\r\nfunction chromas() {\r\n    return range(2048, 4095).map(setNumToChroma);\r\n}\r\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\r\nfunction modes(set, normalize = true) {\r\n    const pcs = get(set);\r\n    const binary = pcs.chroma.split(\"\");\r\n    return compact(binary.map((_, i) => {\r\n        const r = rotate(i, binary);\r\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    }));\r\n}\r\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\r\nfunction isEqual(s1, s2) {\r\n    return get(s1).setNum === get(s2).setNum;\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\r\nfunction isSubsetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o & s) === o;\r\n    };\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\r\nfunction isSupersetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o | s) === o;\r\n    };\r\n}\r\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\r\nfunction isNoteIncludedIn(set) {\r\n    const s = get(set);\r\n    return (noteName) => {\r\n        const n = note(noteName);\r\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n    };\r\n}\r\n/** @deprecated use: isNoteIncludedIn */\r\nconst includes = isNoteIncludedIn;\r\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\r\nfunction filter(set) {\r\n    const isIncluded = isNoteIncludedIn(set);\r\n    return (notes) => {\r\n        return notes.filter(isIncluded);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    chroma,\r\n    num,\r\n    intervals,\r\n    chromas,\r\n    isSupersetOf,\r\n    isSubsetOf,\r\n    isNoteIncludedIn,\r\n    isEqual,\r\n    filter,\r\n    modes,\r\n    // deprecated\r\n    pcset,\r\n};\r\n//// PRIVATE ////\r\nfunction chromaRotations(chroma) {\r\n    const binary = chroma.split(\"\");\r\n    return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma) {\r\n    const setNum = chromaToNumber(chroma);\r\n    const normalizedNum = chromaRotations(chroma)\r\n        .map(chromaToNumber)\r\n        .filter((n) => n >= 2048)\r\n        .sort()[0];\r\n    const normalized = setNumToChroma(normalizedNum);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        name: \"\",\r\n        setNum,\r\n        chroma,\r\n        normalized,\r\n        intervals,\r\n    };\r\n}\r\nfunction listToChroma(set) {\r\n    if (set.length === 0) {\r\n        return EmptyPcset.chroma;\r\n    }\r\n    let pitch;\r\n    const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < set.length; i++) {\r\n        pitch = note(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (pitch.empty)\r\n            pitch = interval(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (!pitch.empty)\r\n            binary[pitch.chroma] = 1;\r\n    }\r\n    return binary.join(\"\");\r\n}\n\nexport default index;\nexport { EmptyPcset, chromaToIntervals, chromas, filter, get, includes, isEqual, isNoteIncludedIn, isSubsetOf, isSupersetOf, modes, pcset };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { get as get$1, EmptyPcset } from '@tonaljs/pcset';\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\r\nconst CHORDS = [\r\n    // ==Major==\r\n    [\"1P 3M 5P\", \"major\", \"M \"],\r\n    [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7\"],\r\n    [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9\"],\r\n    [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13\"],\r\n    [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n    [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69\"],\r\n    [\"1P 3M 5P 7M 11A\", \"lydian\", \"maj#4 Δ#4 Δ#11\"],\r\n    [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6\"],\r\n    // ==Minor==\r\n    // '''Normal'''\r\n    [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n    [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n    [\"1P 3m 5P 7M\", \"minor/major seventh\", \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ\"],\r\n    [\"1P 3m 5P 6M\", \"minor sixth\", \"m6\"],\r\n    [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9\"],\r\n    [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11\"],\r\n    [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13\"],\r\n    // '''Diminished'''\r\n    [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\r\n    [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\r\n    [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø\"],\r\n    // ==Dominant/Seventh==\r\n    // '''Normal'''\r\n    [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n    [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n    [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n    [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n    // '''Altered'''\r\n    [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\r\n    [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\r\n    [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n    // '''Suspended'''\r\n    [\"1P 4P 5P\", \"suspended fourth\", \"sus4\"],\r\n    [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\r\n    [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4\"],\r\n    [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n    [\"1P 4P 5P 7m 9m\", \"suspended fourth flat ninth\", \"b9sus phryg\"],\r\n    // ==Other==\r\n    [\"1P 5P\", \"fifth\", \"5\"],\r\n    [\"1P 3M 5A\", \"augmented\", \"aug + +5\"],\r\n    [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7\"],\r\n    [\"1P 3M 5P 7M 9M 11A\", \"major sharp eleventh (lydian)\", \"maj9#11 Δ9#11\"],\r\n    // ==Legacy==\r\n    [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n    [\"1P 3M 13m\", \"\", \"Mb6\"],\r\n    [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n    [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7aug aug7\"],\r\n    [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7alt\"],\r\n    [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n    [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n    [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9\"],\r\n    [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n    [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n    [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n    [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n    [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n    [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n    [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n    [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n    [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n    [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n    [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n    [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n    [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n    [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\r\n    [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n    [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n    [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n    [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n    [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n    [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n    [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n    [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n    [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n    [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n    [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n    [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n    [\"1P 3M 7m\", \"\", \"7no5\"],\r\n    [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n    [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n    [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n    [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n    [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n    [\"1P 3m 5A\", \"\", \"m#5 m+ mb6\"],\r\n    [\"1P 3m 5P 6M 9M\", \"\", \"m69\"],\r\n    [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n    [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n    [\"1P 3m 5P 7M 9M\", \"\", \"mMaj9\"],\r\n    [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n    [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n    [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n    [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n    [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n    [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n    [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n    [\"1P 3m 6m 7m 9M 11P\", \"\", \"m11A\"],\r\n    [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n    [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\r\n    [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n    [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n    [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n    [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n    [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n    [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n    [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n    [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n    [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n    [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\r\n];\n\nconst NoChordType = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    quality: \"Unknown\",\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoChordType;\r\n}\r\nconst chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\r\n/**\r\n * Get all chord (long) names\r\n */\r\nfunction names() {\r\n    return dictionary.map((chord) => chord.name).filter((x) => x);\r\n}\r\n/**\r\n * Get all chord symbols\r\n */\r\nfunction symbols() {\r\n    return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\r\n}\r\n/**\r\n * Keys used to reference chord types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Return a list of all chord types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\r\nfunction add(intervals, aliases, fullName) {\r\n    const quality = getQuality(intervals);\r\n    const chord = {\r\n        ...get$1(intervals),\r\n        name: fullName || \"\",\r\n        quality,\r\n        intervals,\r\n        aliases,\r\n    };\r\n    dictionary.push(chord);\r\n    if (chord.name) {\r\n        index[chord.name] = chord;\r\n    }\r\n    index[chord.setNum] = chord;\r\n    index[chord.chroma] = chord;\r\n    chord.aliases.forEach((alias) => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n    index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n    const has = (interval) => intervals.indexOf(interval) !== -1;\r\n    return has(\"5A\")\r\n        ? \"Augmented\"\r\n        : has(\"3M\")\r\n            ? \"Major\"\r\n            : has(\"5d\")\r\n                ? \"Diminished\"\r\n                : has(\"3m\")\r\n                    ? \"Minor\"\r\n                    : \"Unknown\";\r\n}\r\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\r\ndictionary.sort((a, b) => a.setNum - b.setNum);\r\nvar index$1 = {\r\n    names,\r\n    symbols,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    chordType,\r\n};\n\nexport default index$1;\nexport { add, addAlias, all, chordType, entries, get, keys, names, removeAll, symbols };\n//# sourceMappingURL=index.es.js.map\n","import { get } from '@tonaljs/chord-type';\nimport { note } from '@tonaljs/core';\nimport { modes } from '@tonaljs/pcset';\n\nconst NotFound = { weight: 0, name: \"\" };\r\nconst namedSet = (notes) => {\r\n    const pcToName = notes.reduce((record, n) => {\r\n        const chroma = note(n).chroma;\r\n        if (chroma !== undefined) {\r\n            record[chroma] = record[chroma] || note(n).name;\r\n        }\r\n        return record;\r\n    }, {});\r\n    return (chroma) => pcToName[chroma];\r\n};\r\nfunction detect(source) {\r\n    const notes = source.map((n) => note(n).pc).filter((x) => x);\r\n    if (note.length === 0) {\r\n        return [];\r\n    }\r\n    const found = findExactMatches(notes, 1);\r\n    return found\r\n        .filter((chord) => chord.weight)\r\n        .sort((a, b) => b.weight - a.weight)\r\n        .map((chord) => chord.name);\r\n}\r\nfunction findExactMatches(notes, weight) {\r\n    const tonic = notes[0];\r\n    const tonicChroma = note(tonic).chroma;\r\n    const noteName = namedSet(notes);\r\n    const allModes = modes(notes, false);\r\n    const found = allModes.map((mode, chroma) => {\r\n        const chordName = get(mode).aliases[0];\r\n        if (!chordName) {\r\n            return NotFound;\r\n        }\r\n        const baseNote = noteName(chroma);\r\n        const isInversion = chroma !== tonicChroma;\r\n        if (isInversion) {\r\n            return { weight: 0.5 * weight, name: `${baseNote}${chordName}/${tonic}` };\r\n        }\r\n        else {\r\n            return { weight: 1 * weight, name: `${baseNote}${chordName}` };\r\n        }\r\n    });\r\n    return found;\r\n}\r\nvar index = { detect };\n\nexport default index;\nexport { detect };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n// SCALES\r\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\r\nconst SCALES = [\r\n    // 5-note scales\r\n    [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n    [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n    [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n    [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n    [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n    [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n    [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n    [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n    [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n    [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n    [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n    [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n    [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n    [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n    [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n    [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n    [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n    [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n    [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n    [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n    [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n    [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n    [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n    [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n    [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n    // 6-note scales\r\n    [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n    [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n    [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n    [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n    [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n    [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n    [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n    [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n    [\"1P 2M 3M 4A 5A 7m\", \"whole tone\", \"messiaen's mode #1\"],\r\n    [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\r\n    [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n    // 7-note scales\r\n    [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n    [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n    [\r\n        \"1P 2m 3m 3M 5d 6m 7m\",\r\n        \"altered\",\r\n        \"super locrian\",\r\n        \"diminished whole tone\",\r\n        \"pomeroy\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\r\n    [\r\n        \"1P 2M 3M 4P 5P 6m 7m\",\r\n        \"mixolydian b6\",\r\n        \"melodic minor fifth mode\",\r\n        \"hindu\",\r\n    ],\r\n    [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n    [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n    [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n    [\r\n        \"1P 2m 3m 4P 5P 6M 7m\",\r\n        \"dorian b2\",\r\n        \"phrygian #6\",\r\n        \"melodic minor second mode\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n    [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7d\",\r\n        \"ultralocrian\",\r\n        \"superlocrian bb7\",\r\n        \"·superlocrian diminished\",\r\n    ],\r\n    [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n    [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n    [\"1P 2M 3m 5d 5P 6M 7m\", \"romanian minor\"],\r\n    [\"1P 2M 3m 4A 5P 6M 7m\", \"dorian #4\"],\r\n    [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n    [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n    [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n    [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\r\n    [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n    [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n    [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n    [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n    [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n    [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n    [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n    [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n    [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n    [\r\n        \"1P 2M 3M 4P 5A 6M 7M\",\r\n        \"major augmented\",\r\n        \"major #5\",\r\n        \"ionian augmented\",\r\n        \"ionian #5\",\r\n    ],\r\n    [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n    // 8-note scales\r\n    [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\r\n    [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n    [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n    [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n    [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n    [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n    [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n    [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n    [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n    [\"1P 2m 3m 3M 4A 5P 6M 7m\", \"half-whole diminished\", \"dominant diminished\", \"messiaen's mode #2\"],\r\n    [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n    [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\r\n    // 9-note scales\r\n    [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n    [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\r\n    // 10-note scales\r\n    [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\r\n    // 12-note scales\r\n    [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\r\n];\n\nconst NoScaleType = {\r\n    ...EmptyPcset,\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\nfunction names() {\r\n    return dictionary.map((scale) => scale.name);\r\n}\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n *\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/scale-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoScaleType;\r\n}\r\nconst scaleType = deprecate(\"ScaleDictionary.scaleType\", \"ScaleType.get\", get);\r\n/**\r\n * Return a list of all scale types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ScaleDictionary.entries\", \"ScaleType.all\", all);\r\n/**\r\n * Keys used to reference scale types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a scale into dictionary\r\n * @param intervals\r\n * @param name\r\n * @param aliases\r\n */\r\nfunction add(intervals, name, aliases = []) {\r\n    const scale = { ...get$1(intervals), name, intervals, aliases };\r\n    dictionary.push(scale);\r\n    index[scale.name] = scale;\r\n    index[scale.setNum] = scale;\r\n    index[scale.chroma] = scale;\r\n    scale.aliases.forEach((alias) => addAlias(scale, alias));\r\n    return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n    index[alias] = scale;\r\n}\r\nSCALES.forEach(([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases));\r\nvar index$1 = {\r\n    names,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    scaleType,\r\n};\n\nexport default index$1;\nexport { NoScaleType, add, addAlias, all, entries, get, keys, names, removeAll, scaleType };\n//# sourceMappingURL=index.es.js.map\n","import { detect } from '@tonaljs/chord-detect';\nexport { detect } from '@tonaljs/chord-detect';\nimport { get as get$1, all as all$1 } from '@tonaljs/chord-type';\nimport { tokenizeNote, note, distance, transpose as transpose$1, deprecate } from '@tonaljs/core';\nimport { isSupersetOf, isSubsetOf } from '@tonaljs/pcset';\nimport { all } from '@tonaljs/scale-type';\n\nconst NoChord = {\r\n    empty: true,\r\n    name: \"\",\r\n    symbol: \"\",\r\n    root: \"\",\r\n    rootDegree: 0,\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    quality: \"Unknown\",\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\r\n// (see https://github.com/danigb/tonal/issues/55)\r\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\r\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\r\nfunction tokenize(name) {\r\n    const [letter, acc, oct, type] = tokenizeNote(name);\r\n    if (letter === \"\") {\r\n        return [\"\", name];\r\n    }\r\n    // aug is augmented (see https://github.com/danigb/tonal/issues/55)\r\n    if (letter === \"A\" && type === \"ug\") {\r\n        return [\"\", \"aug\"];\r\n    }\r\n    // see: https://github.com/tonaljs/tonal/issues/70\r\n    if (!type && (oct === \"4\" || oct === \"5\")) {\r\n        return [letter + acc, oct];\r\n    }\r\n    if (NUM_TYPES.test(oct)) {\r\n        return [letter + acc, oct + type];\r\n    }\r\n    else {\r\n        return [letter + acc + oct, type];\r\n    }\r\n}\r\n/**\r\n * Get a Chord from a chord name.\r\n */\r\nfunction get(src) {\r\n    if (src === \"\") {\r\n        return NoChord;\r\n    }\r\n    if (Array.isArray(src) && src.length === 2) {\r\n        return getChord(src[1], src[0]);\r\n    }\r\n    else {\r\n        const [tonic, type] = tokenize(src);\r\n        const chord = getChord(type, tonic);\r\n        return chord.empty ? getChord(src) : chord;\r\n    }\r\n}\r\n/**\r\n * Get chord properties\r\n *\r\n * @param typeName - the chord type name\r\n * @param [tonic] - Optional tonic\r\n * @param [root]  - Optional root (requires a tonic)\r\n */\r\nfunction getChord(typeName, optionalTonic, optionalRoot) {\r\n    const type = get$1(typeName);\r\n    const tonic = note(optionalTonic || \"\");\r\n    const root = note(optionalRoot || \"\");\r\n    if (type.empty ||\r\n        (optionalTonic && tonic.empty) ||\r\n        (optionalRoot && root.empty)) {\r\n        return NoChord;\r\n    }\r\n    const rootInterval = distance(tonic.pc, root.pc);\r\n    const rootDegree = type.intervals.indexOf(rootInterval) + 1;\r\n    if (!root.empty && !rootDegree) {\r\n        return NoChord;\r\n    }\r\n    const notes = tonic.empty\r\n        ? []\r\n        : type.intervals.map((i) => transpose$1(tonic, i));\r\n    typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\r\n    const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty ? \"\" : \"/\" + root.pc}`;\r\n    const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${optionalRoot ? \" over \" + root.pc : \"\"}`;\r\n    return {\r\n        ...type,\r\n        name,\r\n        symbol,\r\n        type: type.name,\r\n        root: root.name,\r\n        rootDegree,\r\n        tonic: tonic.name,\r\n        notes,\r\n    };\r\n}\r\nconst chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\r\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\r\nfunction transpose(chordName, interval) {\r\n    const [tonic, type] = tokenize(chordName);\r\n    if (!tonic) {\r\n        return chordName;\r\n    }\r\n    return transpose$1(tonic, interval) + type;\r\n}\r\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\r\nfunction chordScales(name) {\r\n    const s = get(name);\r\n    const isChordIncluded = isSupersetOf(s.chroma);\r\n    return all()\r\n        .filter((scale) => isChordIncluded(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\r\nfunction extended(chordName) {\r\n    const s = get(chordName);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSuperset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\r\nfunction reduced(chordName) {\r\n    const s = get(chordName);\r\n    const isSubset = isSubsetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSubset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\nvar index = {\r\n    getChord,\r\n    get,\r\n    detect,\r\n    chordScales,\r\n    extended,\r\n    reduced,\r\n    tokenize,\r\n    transpose,\r\n    // deprecate\r\n    chord,\r\n};\n\nexport default index;\nexport { chord, chordScales, extended, get, getChord, reduced, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","// source: https://en.wikipedia.org/wiki/Note_value\r\nconst DATA = [\r\n    [\r\n        0.125,\r\n        \"dl\",\r\n        [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\r\n    ],\r\n    [0.25, \"l\", [\"long\", \"longa\"]],\r\n    [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\r\n    [1, \"w\", [\"whole\", \"semibreve\"]],\r\n    [2, \"h\", [\"half\", \"minim\"]],\r\n    [4, \"q\", [\"quarter\", \"crotchet\"]],\r\n    [8, \"e\", [\"eighth\", \"quaver\"]],\r\n    [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\r\n    [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\r\n    [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\r\n    [128, \"h\", [\"hundred twenty-eighth\"]],\r\n    [256, \"th\", [\"two hundred fifty-sixth\"]],\r\n];\n\nconst VALUES = [];\r\nDATA.forEach(([denominator, shorthand, names]) => add(denominator, shorthand, names));\r\nconst NoDuration = {\r\n    empty: true,\r\n    name: \"\",\r\n    value: 0,\r\n    fraction: [0, 0],\r\n    shorthand: \"\",\r\n    dots: \"\",\r\n    names: [],\r\n};\r\nfunction names() {\r\n    return VALUES.reduce((names, duration) => {\r\n        duration.names.forEach((name) => names.push(name));\r\n        return names;\r\n    }, []);\r\n}\r\nfunction shorthands() {\r\n    return VALUES.map((dur) => dur.shorthand);\r\n}\r\nconst REGEX = /^([^.]+)(\\.*)$/;\r\nfunction get(name) {\r\n    const [_, simple, dots] = REGEX.exec(name) || [];\r\n    const base = VALUES.find((dur) => dur.shorthand === simple || dur.names.includes(simple));\r\n    if (!base) {\r\n        return NoDuration;\r\n    }\r\n    const fraction = calcDots(base.fraction, dots.length);\r\n    const value = fraction[0] / fraction[1];\r\n    return { ...base, name, dots, value, fraction };\r\n}\r\nconst value = (name) => get(name).value;\r\nconst fraction = (name) => get(name).fraction;\r\nvar index = { names, shorthands, get, value, fraction };\r\n//// PRIVATE ////\r\nfunction add(denominator, shorthand, names) {\r\n    VALUES.push({\r\n        empty: false,\r\n        dots: \"\",\r\n        name: \"\",\r\n        value: 1 / denominator,\r\n        fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\r\n        shorthand,\r\n        names,\r\n    });\r\n}\r\nfunction calcDots(fraction, dots) {\r\n    const pow = Math.pow(2, dots);\r\n    let numerator = fraction[0] * pow;\r\n    let denominator = fraction[1] * pow;\r\n    const base = numerator;\r\n    // add fractions\r\n    for (let i = 0; i < dots; i++) {\r\n        numerator += base / Math.pow(2, i + 1);\r\n    }\r\n    // simplify\r\n    while (numerator % 2 === 0 && denominator % 2 === 0) {\r\n        numerator /= 2;\r\n        denominator /= 2;\r\n    }\r\n    return [numerator, denominator];\r\n}\n\nexport default index;\nexport { fraction, get, names, shorthands, value };\n//# sourceMappingURL=index.es.js.map\n","import { interval, distance as distance$1, coordToInterval } from '@tonaljs/core';\n\n/**\r\n * Get the natural list of names\r\n */\r\nfunction names() {\r\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\n/**\r\n * Get properties of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\r\n */\r\nconst get = interval;\r\n/**\r\n * Get name of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.name('4P') // => \"4P\"\r\n * Interval.name('P4') // => \"4P\"\r\n * Interval.name('C4') // => \"\"\r\n */\r\nconst name = (name) => interval(name).name;\r\n/**\r\n * Get semitones of an interval\r\n * @function\r\n * @example\r\n * Interval.semitones('P4') // => 5\r\n */\r\nconst semitones = (name) => interval(name).semitones;\r\n/**\r\n * Get quality of an interval\r\n * @function\r\n * @example\r\n * Interval.quality('P4') // => \"P\"\r\n */\r\nconst quality = (name) => interval(name).q;\r\n/**\r\n * Get number of an interval\r\n * @function\r\n * @example\r\n * Interval.num('P4') // => 4\r\n */\r\nconst num = (name) => interval(name).num;\r\n/**\r\n * Get the simplified version of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to simplify\r\n * @return {string} the simplified interval\r\n *\r\n * @example\r\n * Interval.simplify(\"9M\") // => \"2M\"\r\n * Interval.simplify(\"2M\") // => \"2M\"\r\n * Interval.simplify(\"-2M\") // => \"7m\"\r\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\r\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\r\n */\r\nfunction simplify(name) {\r\n    const i = interval(name);\r\n    return i.empty ? \"\" : i.simple + i.q;\r\n}\r\n/**\r\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\r\n * of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to invert in interval shorthand\r\n * notation or interval array notation\r\n * @return {string} the inverted interval\r\n *\r\n * @example\r\n * Interval.invert(\"3m\") // => \"6M\"\r\n * Interval.invert(\"2M\") // => \"7m\"\r\n */\r\nfunction invert(name) {\r\n    const i = interval(name);\r\n    if (i.empty) {\r\n        return \"\";\r\n    }\r\n    const step = (7 - i.step) % 7;\r\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n    return interval({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\n// interval numbers\r\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\n// interval qualities\r\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\r\n/**\r\n * Get interval name from semitones number. Since there are several interval\r\n * names for the same number, the name it's arbitrary, but deterministic.\r\n *\r\n * @param {Integer} num - the number of semitones (can be negative)\r\n * @return {string} the interval name\r\n * @example\r\n * Interval.fromSemitones(7) // => \"5P\"\r\n * Interval.fromSemitones(-7) // => \"-5P\"\r\n */\r\nfunction fromSemitones(semitones) {\r\n    const d = semitones < 0 ? -1 : 1;\r\n    const n = Math.abs(semitones);\r\n    const c = n % 12;\r\n    const o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n/**\r\n * Find interval between two notes\r\n *\r\n * @example\r\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\r\n */\r\nconst distance = distance$1;\r\n/**\r\n * Adds two intervals\r\n *\r\n * @function\r\n * @param {string} interval1\r\n * @param {string} interval2\r\n * @return {string} the added interval name\r\n * @example\r\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\r\n */\r\nconst add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\n/**\r\n * Returns a function that adds an interval\r\n *\r\n * @function\r\n * @example\r\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\r\n */\r\nconst addTo = (interval) => (other) => add(interval, other);\r\n/**\r\n * Subtracts two intervals\r\n *\r\n * @function\r\n * @param {string} minuendInterval\r\n * @param {string} subtrahendInterval\r\n * @return {string} the substracted interval name\r\n * @example\r\n * Interval.substract('5P', '3M') // => '3m'\r\n * Interval.substract('3M', '5P') // => '-3m'\r\n */\r\nconst substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    num,\r\n    semitones,\r\n    quality,\r\n    fromSemitones,\r\n    distance,\r\n    invert,\r\n    simplify,\r\n    add,\r\n    addTo,\r\n    substract,\r\n};\r\nfunction combinator(fn) {\r\n    return (a, b) => {\r\n        const coordA = interval(a).coord;\r\n        const coordB = interval(b).coord;\r\n        if (coordA && coordB) {\r\n            const coord = fn(coordA, coordB);\r\n            return coordToInterval(coord).name;\r\n        }\r\n    };\r\n}\n\nexport default index;\nexport { add, addTo, distance, fromSemitones, get, invert, name, names, num, quality, semitones, simplify, substract };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\nfunction isMidi(arg) {\r\n    return +arg >= 0 && +arg <= 127;\r\n}\r\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\r\nfunction toMidi(note$1) {\r\n    if (isMidi(note$1)) {\r\n        return +note$1;\r\n    }\r\n    const n = note(note$1);\r\n    return n.empty ? null : n.midi;\r\n}\r\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\r\nfunction midiToFreq(midi, tuning = 440) {\r\n    return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nconst L2 = Math.log(2);\r\nconst L440 = Math.log(440);\r\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\r\nfunction freqToMidi(freq) {\r\n    const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\r\nfunction midiToNoteName(midi, options = {}) {\r\n    if (isNaN(midi) || midi === -Infinity || midi === Infinity)\r\n        return \"\";\r\n    midi = Math.round(midi);\r\n    const pcs = options.sharps === true ? SHARPS : FLATS;\r\n    const pc = pcs[midi % 12];\r\n    if (options.pitchClass) {\r\n        return pc;\r\n    }\r\n    const o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar index = { isMidi, toMidi, midiToFreq, midiToNoteName, freqToMidi };\n\nexport default index;\nexport { freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, coordToNote } from '@tonaljs/core';\nimport { midiToNoteName, freqToMidi } from '@tonaljs/midi';\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\r\nconst toName = (n) => n.name;\r\nconst onlyNotes = (array) => array.map(note).filter((n) => !n.empty);\r\n/**\r\n * Return the natural note names without octave\r\n * @function\r\n * @example\r\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\r\n */\r\nfunction names(array) {\r\n    if (array === undefined) {\r\n        return NAMES.slice();\r\n    }\r\n    else if (!Array.isArray(array)) {\r\n        return [];\r\n    }\r\n    else {\r\n        return onlyNotes(array).map(toName);\r\n    }\r\n}\r\n/**\r\n * Get a note from a note name\r\n *\r\n * @function\r\n * @example\r\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nconst get = note;\r\n/**\r\n * Get the note name\r\n * @function\r\n */\r\nconst name = (note) => get(note).name;\r\n/**\r\n * Get the note pitch class name\r\n * @function\r\n */\r\nconst pitchClass = (note) => get(note).pc;\r\n/**\r\n * Get the note accidentals\r\n * @function\r\n */\r\nconst accidentals = (note) => get(note).acc;\r\n/**\r\n * Get the note octave\r\n * @function\r\n */\r\nconst octave = (note) => get(note).oct;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst midi = (note) => get(note).midi;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst freq = (note) => get(note).freq;\r\n/**\r\n * Get the note chroma\r\n * @function\r\n */\r\nconst chroma = (note) => get(note).chroma;\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidi(61) // => \"Db4\"\r\n * Note.fromMidi(61.7) // => \"D4\"\r\n */\r\nfunction fromMidi(midi) {\r\n    return midiToNoteName(midi);\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreq(freq) {\r\n    return midiToNoteName(freqToMidi(freq));\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreqSharps(freq) {\r\n    return midiToNoteName(freqToMidi(freq), { sharps: true });\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidiSharps(61) // => \"C#4\"\r\n */\r\nfunction fromMidiSharps(midi) {\r\n    return midiToNoteName(midi, { sharps: true });\r\n}\r\n/**\r\n * Transpose a note by an interval\r\n */\r\nconst transpose = transpose$1;\r\nconst tr = transpose$1;\r\n/**\r\n * Transpose by an interval.\r\n * @function\r\n * @param {string} interval\r\n * @return {function} a function that transposes by the given interval\r\n * @example\r\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\r\n * // => [\"G\", \"A\", \"B\"]\r\n */\r\nconst transposeBy = (interval) => (note) => transpose(note, interval);\r\nconst trBy = transposeBy;\r\n/**\r\n * Transpose from a note\r\n * @function\r\n * @param {string} note\r\n * @return {function}  a function that transposes the the note by an interval\r\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\r\n * // => [\"C\", \"E\", \"G\"]\r\n */\r\nconst transposeFrom = (note) => (interval) => transpose(note, interval);\r\nconst trFrom = transposeFrom;\r\n/**\r\n * Transpose a note by a number of perfect fifths.\r\n *\r\n * @function\r\n * @param {string} note - the note name\r\n * @param {number} fifhts - the number of fifths\r\n * @return {string} the transposed note name\r\n *\r\n * @example\r\n * import { transposeFifths } from \"@tonaljs/note\"\r\n * transposeFifths(\"G4\", 1) // => \"D\"\r\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\r\n */\r\nfunction transposeFifths(noteName, fifths) {\r\n    const note = get(noteName);\r\n    if (note.empty) {\r\n        return \"\";\r\n    }\r\n    const [nFifths, nOcts] = note.coord;\r\n    const transposed = nOcts === undefined\r\n        ? coordToNote([nFifths + fifths])\r\n        : coordToNote([nFifths + fifths, nOcts]);\r\n    return transposed.name;\r\n}\r\nconst trFifths = transposeFifths;\r\nconst ascending = (a, b) => a.height - b.height;\r\nconst descending = (a, b) => b.height - a.height;\r\nfunction sortedNames(notes, comparator) {\r\n    comparator = comparator || ascending;\r\n    return onlyNotes(notes).sort(comparator).map(toName);\r\n}\r\nfunction sortedUniqNames(notes) {\r\n    return sortedNames(notes, ascending).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Simplify a note\r\n *\r\n * @function\r\n * @param {string} note - the note to be simplified\r\n * - sameAccType: default true. Use same kind of accidentals that source\r\n * @return {string} the simplified note or '' if not valid note\r\n * @example\r\n * simplify(\"C##\") // => \"D\"\r\n * simplify(\"C###\") // => \"D#\"\r\n * simplify(\"C###\")\r\n * simplify(\"B#4\") // => \"C5\"\r\n */\r\nconst simplify = nameBuilder(true);\r\n/**\r\n * Get enharmonic of a note\r\n *\r\n * @function\r\n * @param {string} note\r\n * @return {string} the enharmonic note or '' if not valid note\r\n * @example\r\n * Note.enharmonic(\"Db\") // => \"C#\"\r\n * Note.enharmonic(\"C\") // => \"C\"\r\n */\r\nconst enharmonic = nameBuilder(false);\r\nfunction nameBuilder(sameAccidentals) {\r\n    return (noteName) => {\r\n        const note = get(noteName);\r\n        if (note.empty) {\r\n            return \"\";\r\n        }\r\n        const sharps = sameAccidentals ? note.alt > 0 : note.alt < 0;\r\n        const pitchClass = note.midi === null;\r\n        return midiToNoteName(note.midi || note.chroma, { sharps, pitchClass });\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    pitchClass,\r\n    accidentals,\r\n    octave,\r\n    midi,\r\n    ascending,\r\n    descending,\r\n    sortedNames,\r\n    sortedUniqNames,\r\n    fromMidi,\r\n    fromMidiSharps,\r\n    freq,\r\n    fromFreq,\r\n    fromFreqSharps,\r\n    chroma,\r\n    transpose,\r\n    tr,\r\n    transposeBy,\r\n    trBy,\r\n    transposeFrom,\r\n    trFrom,\r\n    transposeFifths,\r\n    trFifths,\r\n    simplify,\r\n    enharmonic,\r\n};\n\nexport default index;\nexport { accidentals, ascending, chroma, descending, enharmonic, freq, fromFreq, fromFreqSharps, fromMidi, fromMidiSharps, get, midi, name, names, octave, pitchClass, simplify, sortedNames, sortedUniqNames, tr, trBy, trFifths, trFrom, transpose, transposeBy, transposeFifths, transposeFrom };\n//# sourceMappingURL=index.es.js.map\n","import { isPitch, altToAcc, isNamed, deprecate, accToAlt, interval } from '@tonaljs/core';\n\nconst NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nconst cache = {};\r\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\r\nfunction get(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : typeof src === \"number\"\r\n            ? get(NAMES[src] || \"\")\r\n            : isPitch(src)\r\n                ? fromPitch(src)\r\n                : isNamed(src)\r\n                    ? get(src.name)\r\n                    : NoRomanNumeral;\r\n}\r\nconst romanNumeral = deprecate(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", get);\r\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\r\nfunction names(major = true) {\r\n    return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n    return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n    return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]);\r\n}\r\nconst ROMANS = \"I II III IV V VI VII\";\r\nconst NAMES = ROMANS.split(\" \");\r\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n    const [name, acc, roman, chordType] = tokenize(src);\r\n    if (!roman) {\r\n        return NoRomanNumeral;\r\n    }\r\n    const upperRoman = roman.toUpperCase();\r\n    const step = NAMES.indexOf(upperRoman);\r\n    const alt = accToAlt(acc);\r\n    const dir = 1;\r\n    return {\r\n        empty: false,\r\n        name,\r\n        roman,\r\n        interval: interval({ step, alt, dir }).name,\r\n        acc,\r\n        chordType,\r\n        alt,\r\n        step,\r\n        major: roman === upperRoman,\r\n        oct: 0,\r\n        dir,\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    // deprecated\r\n    romanNumeral,\r\n};\n\nexport default index;\nexport { get, names, tokenize };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose, altToAcc, accToAlt } from '@tonaljs/core';\nimport { transposeFifths } from '@tonaljs/note';\nimport { get } from '@tonaljs/roman-numeral';\n\nconst Empty = Object.freeze([]);\r\nconst NoKey = {\r\n    type: \"major\",\r\n    tonic: \"\",\r\n    alteration: 0,\r\n    keySignature: \"\",\r\n};\r\nconst NoKeyScale = {\r\n    tonic: \"\",\r\n    grades: Empty,\r\n    intervals: Empty,\r\n    scale: Empty,\r\n    chords: Empty,\r\n    chordsHarmonicFunction: Empty,\r\n    chordScales: Empty,\r\n};\r\nconst NoMajorKey = {\r\n    ...NoKey,\r\n    ...NoKeyScale,\r\n    type: \"major\",\r\n    minorRelative: \"\",\r\n    scale: Empty,\r\n    secondaryDominants: Empty,\r\n    secondaryDominantsMinorRelative: Empty,\r\n    substituteDominants: Empty,\r\n    substituteDominantsMinorRelative: Empty,\r\n};\r\nconst NoMinorKey = {\r\n    ...NoKey,\r\n    type: \"minor\",\r\n    relativeMajor: \"\",\r\n    natural: NoKeyScale,\r\n    harmonic: NoKeyScale,\r\n    melodic: NoKeyScale,\r\n};\r\nconst mapScaleToType = (scale, list, sep = \"\") => list.map((type, i) => `${scale[i]}${sep}${type}`);\r\nfunction keyScale(grades, chords, harmonicFunctions, chordScales) {\r\n    return (tonic) => {\r\n        const intervals = grades.map((gr) => get(gr).interval || \"\");\r\n        const scale = intervals.map((interval) => transpose(tonic, interval));\r\n        return {\r\n            tonic,\r\n            grades,\r\n            intervals,\r\n            scale,\r\n            chords: mapScaleToType(scale, chords),\r\n            chordsHarmonicFunction: mapScaleToType(scale, harmonicFunctions),\r\n            chordScales: mapScaleToType(scale, chordScales, \" \"),\r\n        };\r\n    };\r\n}\r\nconst distInFifths = (from, to) => {\r\n    const f = note(from);\r\n    const t = note(to);\r\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nconst MajorScale = keyScale(\"I II III IV V VI VII\".split(\" \"), \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"), \"T SD T SD D T D\".split(\" \"), \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"));\r\nconst NaturalScale = keyScale(\"I II bIII IV V bVI bVII\".split(\" \"), \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"), \"T SD T SD D SD SD\".split(\" \"), \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"));\r\nconst HarmonicScale = keyScale(\"I II bIII IV V bVI VII\".split(\" \"), \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"), \"T SD T SD D SD D\".split(\" \"), \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\",\"));\r\nconst MelodicScale = keyScale(\"I II bIII IV V VI VII\".split(\" \"), \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"), \"T SD T SD D - -\".split(\" \"), \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\",\"));\r\n/**\r\n * Get a major key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction majorKey(tonic) {\r\n    const pc = note(tonic).pc;\r\n    if (!pc)\r\n        return NoMajorKey;\r\n    const keyScale = MajorScale(pc);\r\n    const alteration = distInFifths(\"C\", pc);\r\n    const romanInTonic = (src) => {\r\n        const r = get(src);\r\n        if (r.empty)\r\n            return \"\";\r\n        return transpose(tonic, r.interval) + r.chordType;\r\n    };\r\n    return {\r\n        ...keyScale,\r\n        type: \"major\",\r\n        minorRelative: transpose(pc, \"-3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\r\n        secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n    };\r\n}\r\n/**\r\n * Get minor key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction minorKey(tnc) {\r\n    const pc = note(tnc).pc;\r\n    if (!pc)\r\n        return NoMinorKey;\r\n    const alteration = distInFifths(\"C\", pc) - 3;\r\n    return {\r\n        type: \"minor\",\r\n        tonic: pc,\r\n        relativeMajor: transpose(pc, \"3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        natural: NaturalScale(pc),\r\n        harmonic: HarmonicScale(pc),\r\n        melodic: MelodicScale(pc),\r\n    };\r\n}\r\n/**\r\n * Given a key signature, returns the tonic of the major key\r\n * @param sigature\r\n * @example\r\n * majorTonicFromKeySignature('###') // => 'A'\r\n */\r\nfunction majorTonicFromKeySignature(sig) {\r\n    if (typeof sig === \"number\") {\r\n        return transposeFifths(\"C\", sig);\r\n    }\r\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n        return transposeFifths(\"C\", accToAlt(sig));\r\n    }\r\n    return null;\r\n}\r\nvar index = { majorKey, majorTonicFromKeySignature, minorKey };\n\nexport default index;\nexport { majorKey, majorTonicFromKeySignature, minorKey };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { chromaToIntervals, EmptyPcset } from '@tonaljs/pcset';\n\nconst DATA = [\r\n    [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n    [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n    [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n    [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n    [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n    [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n    [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\r\n];\n\nconst NoMode = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    alt: 0,\r\n    modeNum: NaN,\r\n    triad: \"\",\r\n    seventh: \"\",\r\n    aliases: [],\r\n};\r\nconst modes = DATA.map(toMode);\r\nconst index = {};\r\nmodes.forEach((mode) => {\r\n    index[mode.name] = mode;\r\n    mode.aliases.forEach((alias) => {\r\n        index[alias] = mode;\r\n    });\r\n});\r\n/**\r\n * Get a Mode by it's name\r\n *\r\n * @example\r\n * get('dorian')\r\n * // =>\r\n * // {\r\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\r\n * //   modeNum: 1,\r\n * //   chroma: '101101010110',\r\n * //   normalized: '101101010110',\r\n * //   name: 'dorian',\r\n * //   setNum: 2902,\r\n * //   alt: 2,\r\n * //   triad: 'm',\r\n * //   seventh: 'm7',\r\n * //   aliases: []\r\n * // }\r\n */\r\nfunction get(name) {\r\n    return typeof name === \"string\"\r\n        ? index[name.toLowerCase()] || NoMode\r\n        : name && name.name\r\n            ? get(name.name)\r\n            : NoMode;\r\n}\r\nconst mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\r\n/**\r\n * Get a list of all modes\r\n */\r\nfunction all() {\r\n    return modes.slice();\r\n}\r\nconst entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\r\n/**\r\n * Get a list of all mode names\r\n */\r\nfunction names() {\r\n    return modes.map((mode) => mode.name);\r\n}\r\nfunction toMode(mode) {\r\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\r\n    const aliases = alias ? [alias] : [];\r\n    const chroma = Number(setNum).toString(2);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        intervals,\r\n        modeNum,\r\n        chroma,\r\n        normalized: chroma,\r\n        name,\r\n        setNum,\r\n        alt,\r\n        triad,\r\n        seventh,\r\n        aliases,\r\n    };\r\n}\r\nvar index$1 = {\r\n    get,\r\n    names,\r\n    all,\r\n    // deprecated\r\n    entries,\r\n    mode,\r\n};\n\nexport default index$1;\nexport { all, entries, get, mode, names };\n//# sourceMappingURL=index.es.js.map\n","import { tokenize } from '@tonaljs/chord';\nimport { transpose, interval, distance } from '@tonaljs/core';\nimport { get } from '@tonaljs/roman-numeral';\n\n/**\r\n * Given a tonic and a chord list expressed with roman numeral notation\r\n * returns the progression expressed with leadsheet chords symbols notation\r\n * @example\r\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\r\n * // => [\"C\", \"Dm7\", \"G7\"]\r\n */\r\nfunction fromRomanNumerals(tonic, chords) {\r\n    const romanNumerals = chords.map(get);\r\n    return romanNumerals.map((rn) => transpose(tonic, interval(rn)) + rn.chordType);\r\n}\r\n/**\r\n * Given a tonic and a chord list with leadsheet symbols notation,\r\n * return the chord list with roman numeral notation\r\n * @example\r\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\r\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\r\n */\r\nfunction toRomanNumerals(tonic, chords) {\r\n    return chords.map((chord) => {\r\n        const [note, chordType] = tokenize(chord);\r\n        const intervalName = distance(tonic, note);\r\n        const roman = get(interval(intervalName));\r\n        return roman.name + chordType;\r\n    });\r\n}\r\nvar index = { fromRomanNumerals, toRomanNumerals };\n\nexport default index;\nexport { fromRomanNumerals, toRomanNumerals };\n//# sourceMappingURL=index.es.js.map\n","import { compact, range } from '@tonaljs/collection';\nimport { toMidi, midiToNoteName } from '@tonaljs/midi';\n\n/**\r\n * Create a numeric range. You supply a list of notes or numbers and it will\r\n * be connected to create complex ranges.\r\n *\r\n * @param {Array} array - the list of notes or numbers used\r\n * @return {Array} an array of numbers or empty array if not valid parameters\r\n *\r\n * @example\r\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\r\n * // it works midi notes\r\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\r\n * // complex range\r\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\r\n */\r\nfunction numeric(notes) {\r\n    const midi = compact(notes.map(toMidi));\r\n    if (!notes.length || midi.length !== notes.length) {\r\n        // there is no valid notes\r\n        return [];\r\n    }\r\n    return midi.reduce((result, note) => {\r\n        const last = result[result.length - 1];\r\n        return result.concat(range(last, note).slice(1));\r\n    }, [midi[0]]);\r\n}\r\n/**\r\n * Create a range of chromatic notes. The altered notes will use flats.\r\n *\r\n * @function\r\n * @param {String|Array} list - the list of notes or midi note numbers\r\n * @return {Array} an array of note names\r\n *\r\n * @example\r\n * Range.chromatic(\"C2 E2 D2\") // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\r\n * // with sharps\r\n * Range.chromatic(\"C2 C3\", true) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\r\n */\r\nfunction chromatic(notes, options) {\r\n    return numeric(notes).map((midi) => midiToNoteName(midi, options));\r\n}\r\nvar index = { numeric, chromatic };\n\nexport default index;\nexport { chromatic, numeric };\n//# sourceMappingURL=index.es.js.map\n","import { all } from '@tonaljs/chord-type';\nimport { rotate } from '@tonaljs/collection';\nimport { note, transpose, deprecate } from '@tonaljs/core';\nimport { sortedUniqNames } from '@tonaljs/note';\nimport { isSubsetOf, isSupersetOf, modes } from '@tonaljs/pcset';\nimport { names as names$1, get as get$1, all as all$1 } from '@tonaljs/scale-type';\n\n/**\r\n * References:\r\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\r\n * @module scale\r\n */\r\nconst NoScale = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n/**\r\n * Given a string with a scale name and (optionally) a tonic, split\r\n * that components.\r\n *\r\n * It retuns an array with the form [ name, tonic ] where tonic can be a\r\n * note name or null and name can be any arbitrary string\r\n * (this function doesn\"t check if that scale name exists)\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array} an array [tonic, name]\r\n * @example\r\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\r\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\r\n * tokenize() // => [\"\", \"\"]\r\n */\r\nfunction tokenize(name) {\r\n    if (typeof name !== \"string\") {\r\n        return [\"\", \"\"];\r\n    }\r\n    const i = name.indexOf(\" \");\r\n    const tonic = note(name.substring(0, i));\r\n    if (tonic.empty) {\r\n        const n = note(name);\r\n        return n.empty ? [\"\", name] : [n.name, \"\"];\r\n    }\r\n    const type = name.substring(tonic.name.length + 1);\r\n    return [tonic.name, type.length ? type : \"\"];\r\n}\r\n/**\r\n * Get all scale names\r\n * @function\r\n */\r\nconst names = names$1;\r\n/**\r\n * Get a Scale from a scale name.\r\n */\r\nfunction get(src) {\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const st = get$1(tokens[1]);\r\n    if (st.empty) {\r\n        return NoScale;\r\n    }\r\n    const type = st.name;\r\n    const notes = tonic\r\n        ? st.intervals.map((i) => transpose(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type : type;\r\n    return { ...st, name, type, tonic, notes };\r\n}\r\nconst scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\r\n/**\r\n * Get all chords that fits a given scale\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array<string>} - the chord names\r\n *\r\n * @example\r\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\r\n */\r\nfunction scaleChords(name) {\r\n    const s = get(name);\r\n    const inScale = isSubsetOf(s.chroma);\r\n    return all()\r\n        .filter((chord) => inScale(chord.chroma))\r\n        .map((chord) => chord.aliases[0]);\r\n}\r\n/**\r\n * Get all scales names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n * @example\r\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\r\n */\r\nfunction extended(name) {\r\n    const s = get(name);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((scale) => isSuperset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Find all scales names that are a subset of the given one\r\n * (has less notes but all from the given scale)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n *\r\n * @example\r\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\r\n */\r\nfunction reduced(name) {\r\n    const isSubset = isSubsetOf(get(name).chroma);\r\n    return all$1()\r\n        .filter((scale) => isSubset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Given an array of notes, return the scale: a pitch class set starting from\r\n * the first note of the array\r\n *\r\n * @function\r\n * @param {string[]} notes\r\n * @return {string[]} pitch classes with same tonic\r\n * @example\r\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\r\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\r\n */\r\nfunction scaleNotes(notes) {\r\n    const pcset = notes.map((n) => note(n).pc).filter((x) => x);\r\n    const tonic = pcset[0];\r\n    const scale = sortedUniqNames(pcset);\r\n    return rotate(scale.indexOf(tonic), scale);\r\n}\r\n/**\r\n * Find mode names of a scale\r\n *\r\n * @function\r\n * @param {string} name - scale name\r\n * @example\r\n * modeNames(\"C pentatonic\") // => [\r\n *   [\"C\", \"major pentatonic\"],\r\n *   [\"D\", \"egyptian\"],\r\n *   [\"E\", \"malkos raga\"],\r\n *   [\"G\", \"ritusen\"],\r\n *   [\"A\", \"minor pentatonic\"]\r\n * ]\r\n */\r\nfunction modeNames(name) {\r\n    const s = get(name);\r\n    if (s.empty) {\r\n        return [];\r\n    }\r\n    const tonics = s.tonic ? s.notes : s.intervals;\r\n    return modes(s.chroma)\r\n        .map((chroma, i) => {\r\n        const modeName = get(chroma).name;\r\n        return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n    })\r\n        .filter((x) => x[0]);\r\n}\r\nvar index = {\r\n    get,\r\n    names,\r\n    extended,\r\n    modeNames,\r\n    reduced,\r\n    scaleChords,\r\n    scaleNotes,\r\n    tokenize,\r\n    // deprecated\r\n    scale,\r\n};\n\nexport default index;\nexport { extended, get, modeNames, names, reduced, scale, scaleChords, scaleNotes, tokenize };\n//# sourceMappingURL=index.es.js.map\n","// CONSTANTS\r\nconst NONE = {\r\n    empty: true,\r\n    name: \"\",\r\n    upper: undefined,\r\n    lower: undefined,\r\n    type: undefined,\r\n    additive: [],\r\n};\r\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\r\n// PUBLIC API\r\nfunction names() {\r\n    return NAMES.slice();\r\n}\r\nconst REGEX = /^(\\d?\\d(?:\\+\\d)*)\\/(\\d)$/;\r\nconst CACHE = new Map();\r\nfunction get(literal) {\r\n    const cached = CACHE.get(literal);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const ts = build(parse(literal));\r\n    CACHE.set(literal, ts);\r\n    return ts;\r\n}\r\nfunction parse(literal) {\r\n    if (typeof literal === \"string\") {\r\n        const [_, up, low] = REGEX.exec(literal) || [];\r\n        return parse([up, low]);\r\n    }\r\n    const [up, down] = literal;\r\n    const denominator = +down;\r\n    if (typeof up === \"number\") {\r\n        return [up, denominator];\r\n    }\r\n    const list = up.split(\"+\").map((n) => +n);\r\n    return list.length === 1 ? [list[0], denominator] : [list, denominator];\r\n}\r\nvar index = { names, parse, get };\r\n// PRIVATE\r\nfunction build([up, down]) {\r\n    const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\r\n    const lower = down;\r\n    if (upper === 0 || lower === 0) {\r\n        return NONE;\r\n    }\r\n    const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\r\n    const additive = Array.isArray(up) ? up : [];\r\n    const type = lower === 4 || lower === 2\r\n        ? \"simple\"\r\n        : lower === 8 && upper % 3 === 0\r\n            ? \"compound\"\r\n            : \"irregular\";\r\n    return {\r\n        empty: false,\r\n        name,\r\n        type,\r\n        upper,\r\n        lower,\r\n        additive,\r\n    };\r\n}\n\nexport default index;\nexport { get, names, parse };\n//# sourceMappingURL=index.es.js.map\n","export { default as AbcNotation } from '@tonaljs/abc-notation';\nimport * as array from '@tonaljs/array';\nexport { array as Array };\nexport { default as Chord } from '@tonaljs/chord';\nimport ChordType from '@tonaljs/chord-type';\nexport { default as ChordType } from '@tonaljs/chord-type';\nexport { default as Collection } from '@tonaljs/collection';\nimport * as Core from '@tonaljs/core';\nexport * from '@tonaljs/core';\nexport { Core };\nexport { default as DurationValue } from '@tonaljs/duration-value';\nexport { default as Interval } from '@tonaljs/interval';\nexport { default as Key } from '@tonaljs/key';\nexport { default as Midi } from '@tonaljs/midi';\nexport { default as Mode } from '@tonaljs/mode';\nexport { default as Note } from '@tonaljs/note';\nimport Pcset from '@tonaljs/pcset';\nexport { default as Pcset } from '@tonaljs/pcset';\nexport { default as Progression } from '@tonaljs/progression';\nexport { default as Range } from '@tonaljs/range';\nexport { default as RomanNumeral } from '@tonaljs/roman-numeral';\nexport { default as Scale } from '@tonaljs/scale';\nimport ScaleType from '@tonaljs/scale-type';\nexport { default as ScaleType } from '@tonaljs/scale-type';\nexport { default as TimeSignature } from '@tonaljs/time-signature';\n\n// deprecated (backwards compatibility)\r\nconst Tonal = Core;\r\nconst PcSet = Pcset;\r\nconst ChordDictionary = ChordType;\r\nconst ScaleDictionary = ScaleType;\n\nexport { ChordDictionary, PcSet, ScaleDictionary, Tonal };\n//# sourceMappingURL=index.es.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scale_1 = require(\"./scale\");\nexports.scale = scale_1.getScale;\nexports.mode = scale_1.getScale;\nexports.scales = scale_1.scales;\nexports.modes = scale_1.scales;\nvar chord_1 = require(\"./chord\");\nexports.addChord = chord_1.addChord;\nexports.chord = chord_1.getChord;\nexports.chords = chord_1.chords;\nvar clip_1 = require(\"./clip\");\nexports.clip = clip_1.clip;\nvar progression_1 = require(\"./progression\");\nexports.getChordDegrees = progression_1.getChordDegrees;\nexports.getChordsByProgression = progression_1.getChordsByProgression;\nexports.progression = progression_1.progression;\nvar arp_1 = require(\"./arp\");\nexports.arp = arp_1.arp;\nvar midi_1 = require(\"./midi\");\nexports.midi = midi_1.midi;\nvar session_1 = require(\"./session\");\nexports.Session = session_1.Session;\nvar max_1 = require(\"./max\");\nexports.max = max_1.max;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar defaultSubdiv = '4n';\nvar defaultDur = '8n';\nvar random = function (num) {\n    if (num === void 0) { num = 1; }\n    return Math.round(Math.random() * num);\n};\nvar getNote = function (el, params, counter) {\n    return el === 'R' && params.randomNotes\n        ? params.randomNotes[random(params.randomNotes.length - 1)]\n        : params.notes[counter % params.notes.length];\n};\nvar getDuration = function (params, counter) {\n    return params.durations\n        ? params.durations[counter % params.durations.length]\n        : params.dur || params.subdiv || defaultDur;\n};\n/**\n * @param  {Object}\n * @return {Function}\n * Take an object literal which has a Tone.js instrument and return a function that can be used\n * as the callback in Tone.Sequence https://tonejs.github.io/docs/Sequence\n */\nvar getSeqFn = function (params) {\n    var counter = 0;\n    if (params.instrument instanceof Tone.Player) {\n        return function (time, el) {\n            if (el === 'x' || el === 'R') {\n                params.instrument.start(time);\n                counter++;\n            }\n        };\n    }\n    else if (params.instrument instanceof Tone.PolySynth ||\n        params.instrument instanceof Tone.Sampler) {\n        return function (time, el) {\n            if (el === 'x' || el === 'R') {\n                params.instrument.triggerAttackRelease(getNote(el, params, counter), getDuration(params, counter), time);\n                counter++;\n            }\n        };\n    }\n    else if (params.instrument instanceof Tone.NoiseSynth) {\n        return function (time, el) {\n            if (el === 'x' || el === 'R') {\n                params.instrument.triggerAttackRelease(getDuration(params, counter), time);\n                counter++;\n            }\n        };\n    }\n    else {\n        return function (time, el) {\n            if (el === 'x' || el === 'R') {\n                params.instrument.triggerAttackRelease(getNote(el, params, counter)[0], getDuration(params, counter), time);\n                counter++;\n            }\n        };\n    }\n};\nexports.recursivelyApplyPatternToDurations = function (patternArr, length, durations) {\n    if (durations === void 0) { durations = []; }\n    patternArr.forEach(function (char) {\n        if (typeof char === 'string') {\n            if (char === 'x' || char === 'R') {\n                durations.push(length);\n            }\n            if (char === '_' && durations.length) {\n                durations[durations.length - 1] += length;\n            }\n        }\n        if (Array.isArray(char)) {\n            exports.recursivelyApplyPatternToDurations(char, length / char.length, durations);\n        }\n    });\n    return durations;\n};\nvar generateSequence = function (params, context) {\n    var _a;\n    context = context || Tone.getContext();\n    if (!params.pattern) {\n        throw new Error('No pattern provided!');\n    }\n    if (!params.player &&\n        !params.instrument &&\n        !params.sample &&\n        !params.buffer &&\n        !params.synth &&\n        !params.sampler &&\n        !params.samples) {\n        throw new Error('No player or instrument provided!');\n    }\n    if (!params.durations && !params.dur) {\n        params.durations = exports.recursivelyApplyPatternToDurations(utils_1.expandStr(params.pattern), Tone.Ticks(params.subdiv || defaultSubdiv).toSeconds());\n    }\n    /*\n      1. The params object can be used to pass a sample (sound source) OR a synth(Synth/FMSynth/AMSynth etc) or samples.\n      Scribbletune will then create a Tone.js Player or Tone.js Instrument or Tone.js Sampler respectively\n      2. It can also be used to pass a Tone.js Player object or instrument that was created elsewhere\n      (mostly by Scribbletune itself in the channel creation method)\n      Either ways, a pattern is required and it will be used to create a playable Tone.js Sequence\n       */\n    var effects = [];\n    var createEffect = function (eff) {\n        var effect = typeof eff === 'string'\n            ? new Tone[eff]({ context: context })\n            : eff.context !== context\n                ? recreateToneObjectInContext(eff, context)\n                : eff;\n        return effect.toDestination();\n    };\n    var startEffect = function (eff) {\n        return typeof eff.start === 'function' ? eff.start() : eff;\n    };\n    if (params.effects) {\n        if (!Array.isArray(params.effects)) {\n            params.effects = [params.effects];\n        }\n        effects = params.effects.map(createEffect).map(startEffect);\n    }\n    if (params.synth && !params.instrument) {\n        params.instrument = params.synth;\n        console.warn('The \"synth\" parameter will be deprecated in the future. Please use the \"instrument\" parameter instead.');\n    }\n    params.instrument =\n        params.sample || params.buffer\n            ? new Tone.Player({\n                url: params.sample || params.buffer,\n                context: context,\n            })\n            : params.sampler\n                ? params.sampler\n                : params.player\n                    ? params.player\n                    : params.samples\n                        ? new Tone.Sampler({ url: params.samples, context: context })\n                        : typeof params.instrument === 'string'\n                            ? new Tone[params.instrument]({ context: context })\n                            : params.instrument;\n    if (params.instrument.context !== context) {\n        params.instrument = recreateToneObjectInContext(params.instrument, context);\n    }\n    if (params.volume) {\n        params.instrument.volume.value = params.volume;\n    }\n    (_a = params.instrument).chain.apply(_a, effects).toDestination();\n    return new Tone.Sequence({\n        callback: getSeqFn(params),\n        events: utils_1.expandStr(params.pattern),\n        subdivision: params.subdiv || defaultSubdiv,\n        context: context,\n    });\n};\nexports.totalPatternDuration = function (pattern, subdivOrLength) {\n    return typeof subdivOrLength === 'number'\n        ? subdivOrLength * utils_1.expandStr(pattern).length\n        : Tone.Ticks(subdivOrLength).toSeconds() * utils_1.expandStr(pattern).length;\n};\nvar leastCommonMultiple = function (n1, n2) {\n    var _a = n1 < n2 ? [n1, n2] : [n2, n1], smallest = _a[0], largest = _a[1];\n    var i = largest;\n    while (i % smallest !== 0) {\n        i += largest;\n    }\n    return i;\n};\nexports.renderingDuration = function (pattern, subdivOrLength, notes, randomNotes) {\n    var _a;\n    var patternRegularNotesCount = pattern.split('').filter(function (c) {\n        return c === 'x';\n    }).length;\n    var patternRandomNotesCount = pattern.split('').filter(function (c) {\n        return c === 'R';\n    }).length;\n    var patternNotesCount = ((_a = randomNotes) === null || _a === void 0 ? void 0 : _a.length) ? patternRegularNotesCount\n        : patternRegularNotesCount + patternRandomNotesCount;\n    var notesCount = notes.length || 1;\n    return ((exports.totalPatternDuration(pattern, subdivOrLength) / patternNotesCount) *\n        leastCommonMultiple(notesCount, patternNotesCount));\n};\nvar ongoingRenderingCounter = 0;\nvar originalContext;\nvar recreateToneObjectInContext = function (toneObject, context) {\n    if (toneObject instanceof Tone.PolySynth) {\n        return new Tone.PolySynth(Tone[toneObject._dummyVoice.name], __assign(__assign({}, toneObject.get()), { context: context }));\n    }\n    else if (toneObject instanceof Tone.Player) {\n        return new Tone.Player({ url: toneObject._buffer, context: context });\n    }\n    else if (toneObject instanceof Tone.Sampler) {\n        var _a = toneObject.get(), attack = _a.attack, curve = _a.curve, release = _a.release, volume = _a.volume;\n        var paramsFromSampler = { attack: attack, curve: curve, release: release, volume: volume };\n        var paramsFromBuffers = {\n            baseUrl: toneObject._buffers.baseUrl,\n            urls: Object.fromEntries(toneObject._buffers._buffers.entries()),\n        };\n        return new Tone.Sampler(__assign(__assign(__assign({}, paramsFromSampler), paramsFromBuffers), { context: context }));\n    }\n    else {\n        return new Tone[toneObject.name](__assign(__assign({}, toneObject.get()), { context: context }));\n    }\n};\nvar offlineRenderClip = function (params, duration) {\n    if (!originalContext) {\n        originalContext = Tone.getContext();\n    }\n    ongoingRenderingCounter++;\n    var player = new Tone.Player({ context: originalContext, loop: true });\n    Tone.Offline(function (context) { return __awaiter(void 0, void 0, void 0, function () {\n        var sequence;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    sequence = generateSequence(params, context);\n                    return [4 /*yield*/, Tone.loaded()];\n                case 1:\n                    _a.sent();\n                    sequence.start();\n                    context.transport.start();\n                    return [2 /*return*/];\n            }\n        });\n    }); }, duration).then(function (buffer) {\n        var _a, _b;\n        player.buffer = buffer;\n        ongoingRenderingCounter--;\n        if (ongoingRenderingCounter === 0) {\n            Tone.setContext(originalContext);\n            (_b = (_a = params).offlineRenderingCallback) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    });\n    player.toDestination();\n    player.sync();\n    return player;\n};\n/**\n * @param  {Object}\n * @return {Tone.js Sequence Object}\n * Take a object literal that may have a Tone.js player OR instrument\n * or simply a sample or synth with a pattern and return a Tone.js sequence\n */\nexports.browserClip = function (params) {\n    if (params.offlineRendering) {\n        return offlineRenderClip(params, exports.renderingDuration(params.pattern, params.subdiv || defaultSubdiv, params.notes, params.randomNotes));\n    }\n    return generateSequence(params, originalContext);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scale_1 = require(\"./scale\");\nvar utils_1 = require(\"./utils\");\n/**\n * Get the chords that go with a given scale/mode\n * This is useful only in case you want to check what chords work with a scale/mode\n * so that you can come up with chord progressions\n * @param  {String} mode e.g. major\n * @return {Array} e.g.['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°']\n */\nexports.getChordDegrees = function (mode) {\n    var theRomans = {\n        ionian: ['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°'],\n        dorian: ['i', 'ii', 'III', 'IV', 'v', 'vi°', 'VII'],\n        phrygian: ['i', 'II', 'III', 'iv', 'v°', 'VI', 'vii'],\n        lydian: ['I', 'II', 'iii', 'iv°', 'V', 'vi', 'vii'],\n        mixolydian: ['I', 'ii', 'iii°', 'IV', 'v', 'vi', 'VII'],\n        aeolian: ['i', 'ii°', 'III', 'iv', 'v', 'VI', 'VII'],\n        locrian: ['i°', 'II', 'iii', 'iv', 'V', 'VI', 'vii'],\n        'melodic minor': ['i', 'ii', 'III+', 'IV', 'V', 'vi°', 'vii°'],\n        'harmonic minor': ['i', 'ii°', 'III+', 'iv', 'V', 'VI', 'vii°'],\n    };\n    theRomans.major = theRomans.ionian;\n    theRomans.minor = theRomans.aeolian;\n    return theRomans[mode] || [];\n};\nvar idxByDegree = {\n    i: 0,\n    ii: 1,\n    iii: 2,\n    iv: 3,\n    v: 4,\n    vi: 5,\n    vii: 6,\n};\n/**\n * Get a chord name from degree\n * @param  {String} roman e.g. ii OR ii° OR V7\n * @return {String} e.g. m OR m7b5 OR Maj7\n */\nvar getChordName = function (roman) {\n    // remove any non character\n    var str = roman.replace(/\\W/g, '');\n    var prefix = 'M';\n    // check if it s lowercase\n    if (str.toLowerCase() === str) {\n        prefix = 'm';\n    }\n    if (roman.indexOf('°') > -1) {\n        return prefix + '7b5';\n    }\n    if (roman.indexOf('+') > -1) {\n        return prefix + '#5';\n    }\n    if (roman.indexOf('7') > -1) {\n        return prefix === 'M' ? 'Maj7' : 'm7';\n    }\n    return prefix;\n};\n/**\n * Take the specified scale and degrees and return the chord names for them\n * These can be used as the value for the `notes` param of the `clip` method\n * @param {String} noteOctaveScale e.g. 'C4 major'\n * @param  {String} chordDegress e.g. 'I IV V IV'\n * @return {String} e.g. 'CM FM GM FM'\n */\nexports.getChordsByProgression = function (noteOctaveScale, chordDegress) {\n    // Set the octave if missing\n    // For example if the method was called with `C major` instead of `C4 major`, then add the 4\n    var noteOctaveScaleArr = noteOctaveScale.split(' ');\n    if (!noteOctaveScaleArr[0].match(/\\d/)) {\n        noteOctaveScaleArr[0] += '4';\n        noteOctaveScale = noteOctaveScaleArr.join(' ');\n    }\n    // Get the scale from the given note and scale/mode combination\n    var mode = scale_1.getScale(noteOctaveScale);\n    var chordDegreesArr = chordDegress.replace(/\\s*,+\\s*/g, ' ').split(' ');\n    // Now we have something like ['i', 'ii', 'IV']\n    // Convert it to a chord family such as ['Cm', 'Dm', 'FM']\n    var chordFamily = chordDegreesArr.map(function (roman, idx) {\n        var chordName = getChordName(roman); // e.g. m\n        // get the index to be used by removing any digit or non alphabet character\n        var scaleId = idxByDegree[roman.replace(/\\W|\\d/g, '').toLowerCase()]; // e.g. 0\n        // get the note itself\n        var note = mode[scaleId]; // e.g. C\n        // get the octave of the note;\n        var oct = note.replace(/\\D+/, ''); // e.g. 4\n        // now get the chord\n        return note.replace(/\\d/, '') + chordName + '-' + oct;\n    });\n    return chordFamily.toString().replace(/,/g, ' ');\n};\nvar getProgFactory = function (_a) {\n    var T = _a.T, P = _a.P, D = _a.D;\n    return function (count) {\n        if (count === void 0) { count = 4; }\n        var chords = [];\n        // Push root/tonic\n        chords.push(utils_1.pickOne(T));\n        var i = 1;\n        // Pick a predominant\n        if (i < count - 1) {\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        // Try another predominant\n        if (i < count - 1 && utils_1.dice()) {\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        ///////// 4 or more//////////\n        if (i < count - 1) {\n            // Pick a dominant\n            chords.push(utils_1.pickOne(D));\n            i++;\n        }\n        if (i < count - 1) {\n            // Pick a predominant\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        if (i < count - 1) {\n            // Pick a dominant\n            chords.push(utils_1.pickOne(D));\n            i++;\n        }\n        // Pick a predominant if possible\n        if (i < count - 1 && utils_1.dice()) {\n            chords.push(utils_1.pickOne(P));\n            i++;\n        }\n        ////////////////////////////\n        // Fill the rest with dominant\n        while (i < count) {\n            chords.push(utils_1.pickOne(D));\n            i++;\n        }\n        return chords;\n    };\n};\nvar M = getProgFactory({ T: ['I', 'vi'], P: ['ii', 'IV'], D: ['V'] });\nvar m = getProgFactory({ T: ['i', 'VI'], P: ['ii', 'iv'], D: ['V'] });\n/**\n * Generate a chord progression based on basic music theory\n * where we follow tonic to optionally predominant and then dominant\n * and then randomly to predominant and continue this till we reach `count`\n * @param scale e.g. M (for major chord progression), m (for minor chord progression)\n * @param count e.g. 4\n */\nexports.progression = function (scale, count) {\n    if (count === void 0) { count = 4; }\n    if (scale === 'major' || scale === 'M') {\n        return M(count);\n    }\n    if (scale === 'minor' || scale === 'm') {\n        return m(count);\n    }\n};\n","\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chord_1 = require(\"./chord\");\n/**\n * Take an array and fill it with it s own elements in the next octave till it s of the specified `len`\n * @param  {Array} arr e.g. ['a4', 'b4']\n * @param  {Number} e.g. len 4\n * @return {Array} e.g. ['a4', 'b4', 'a5', 'b5']\n */\nvar fillArr = function (arr, len) {\n    var bumpOctave = function (el) {\n        var note = el.replace(/\\d/, '');\n        var oct = el.replace(/\\D/g, '');\n        return note + (+oct + 1);\n    };\n    // Create a couple of chord arrays with bumped octaves\n    // so that something like [c3, e3, g4] turns into [c4, e4, g5] and [c5, e5, g6]\n    var arr1 = arr.map(bumpOctave);\n    var arr2 = arr1.map(bumpOctave);\n    var finalArr = __spreadArrays(arr, arr1, arr2);\n    // Slice and return only as much as required\n    return finalArr.slice(0, len);\n};\n/**\n *\n * @param chordsOrParams a string that denotes comma separated chords to be used or an object with additional properties\n * By default, if this is a string, the the count of notes generated is 8 and the order is ascending.\n * For instance arp('CM FM') will result in an array of notes [C4, E4, G4, F4, A4, C4, C5, E5]\n * You can even provide Params as an object.\n * For e.g. arp({count: 8, order: '10325476', chords: 'FM-4 Gm7b5-4 AbM-4 Bbm-4 Cm-5 DbM-5 EbM-5})\n */\nexports.arp = function (chordsOrParams) {\n    var finalArr = [];\n    var params = {\n        count: 4,\n        order: '0123',\n        chords: '',\n    };\n    if (typeof chordsOrParams === 'string') {\n        params.chords = chordsOrParams;\n    }\n    else {\n        if (chordsOrParams.order && chordsOrParams.order.match(/\\D/g)) {\n            throw new TypeError('Invalid value for order');\n        }\n        if (chordsOrParams.count > 8 || chordsOrParams.count < 2) {\n            throw new TypeError('Invalid value for count');\n        }\n        // Provision a order for the notes in case only count was provided\n        if (chordsOrParams.count && !chordsOrParams.order) {\n            params.order = Array.from(Array(chordsOrParams.count).keys()).join('');\n        }\n        Object.assign(params, chordsOrParams);\n    }\n    // Chords can be passed as a string, e.g. CM-4 FM-4\n    // or as an array of notes arrays e.g. [['C3', 'E3', 'G3', 'B3'], ['F3', 'A3', 'C4', 'E4']]\n    if (typeof params.chords === 'string') {\n        var chordsArr = params.chords.split(' ');\n        var _loop_1 = function (chord) {\n            var filledArr = fillArr(chord_1.getChord(chord), params.count);\n            // reorder the filledArr as per params.order\n            var reorderedArr = params.order\n                .split('')\n                .map(function (idx) { return filledArr[idx]; });\n            finalArr = __spreadArrays(finalArr, reorderedArr);\n        };\n        for (var _i = 0, chordsArr_1 = chordsArr; _i < chordsArr_1.length; _i++) {\n            var chord = chordsArr_1[_i];\n            _loop_1(chord);\n        }\n    }\n    else if (Array.isArray(params.chords)) {\n        var _loop_2 = function (chord) {\n            var filledArr = fillArr(chord, params.count);\n            // reorder the filledArr as per params.order\n            var reorderedArr = params.order\n                .split('')\n                .map(function (idx) { return filledArr[idx]; });\n            finalArr = __spreadArrays(finalArr, reorderedArr);\n        };\n        for (var _a = 0, _b = params.chords; _a < _b.length; _a++) {\n            var chord = _b[_a];\n            _loop_2(chord);\n        }\n    }\n    else {\n        throw new TypeError('Invalid value for chords');\n    }\n    return finalArr;\n};\n","\"use strict\";\n/*global LiveAPI:true*/\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs_1 = __importDefault(require(\"fs\"));\nvar jsmidgen = __importStar(require(\"jsmidgen\"));\n/**\n * Take an array of note objects to generate a MIDI file in the same location as this method is called\n * @param  {<Array>NoteObject} notes    Notes are in the format: {note: ['c3'], level: 127, length: 64}\n * @param  {String | null} fileName If a filename is not provided, then `music.mid` is used by default\n * If `null` is passed for `fileName`, bytes are returned instead of creating a file\n * If this method is called from a browser then it will return a HTML link that you can append in your page\n * This link will enable the generated MIDI as a downloadable file.\n * @param {Number | null} bpm If a value is provided, the generated midi file will be set to this bpm value.\n */\nexports.midi = function (notes, fileName, bpm) {\n    if (fileName === void 0) { fileName = 'music.mid'; }\n    var file = createFileFromNotes(notes, bpm);\n    var bytes = file.toBytes();\n    if (fileName === null) {\n        return bytes;\n    }\n    if (!fileName.endsWith('.mid')) {\n        fileName = fileName + '.mid';\n    }\n    if (typeof window !== 'undefined' &&\n        window.URL &&\n        window.URL.createObjectURL) {\n        return createDownloadLink(bytes, fileName);\n    }\n    fs_1.default.writeFileSync(fileName, bytes, 'binary');\n    console.log(\"MIDI file generated: \" + fileName + \".\");\n};\n/**\n * Create a downloadable link\n * @param b\n */\nvar createDownloadLink = function (b, fileName) {\n    // Convert bytes to array buffer\n    // Accepted answer on https://stackoverflow.com/questions/35038884/download-file-from-bytes-in-javascript\n    var bytes = new Uint8Array(b.length);\n    for (var i = 0; i < b.length; i++) {\n        var ascii = b.charCodeAt(i);\n        bytes[i] = ascii;\n    }\n    // Create a Blob so that we can set it up with the type of file we want (for eg MIDI)\n    var blob = new Blob([bytes], { type: 'audio/midi' });\n    // Create a link element to be used (you can use an existing link on the page as well)\n    var link = document.createElement('a');\n    link.href =\n        (typeof window !== 'undefined' &&\n            typeof window.URL !== 'undefined' &&\n            typeof window.URL.createObjectURL !== 'undefined' &&\n            window.URL.createObjectURL(blob)) ||\n            '';\n    // Give the downloadable file a name\n    link.download = fileName;\n    link.innerText = 'Download MIDI file';\n    return link;\n};\nvar createFileFromNotes = function (notes, bpm) {\n    var file = new jsmidgen.File();\n    var track = new jsmidgen.Track();\n    // set the track's bpm if it is provided\n    if (typeof bpm === 'number') {\n        track.setTempo(bpm);\n    }\n    file.addTrack(track);\n    for (var _i = 0, notes_1 = notes; _i < notes_1.length; _i++) {\n        var noteObj = notes_1[_i];\n        var level = noteObj.level || 127;\n        // While writing chords (multiple notes per tick)\n        // only the first noteOn (or noteOff) needs the complete arity of the function call\n        // subsequent calls need only the first 2 args (channel and note)\n        if (noteObj.note) {\n            if (typeof noteObj.note === 'string') {\n                track.noteOn(0, noteObj.note, noteObj.length, level); // channel, pitch(note), length, velocity\n                track.noteOff(0, noteObj.note, noteObj.length, level);\n            }\n            else {\n                track.addChord(0, noteObj.note, noteObj.length, level);\n            }\n        }\n        else {\n            track.noteOff(0, '', noteObj.length);\n        }\n    }\n    return file;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar channel_1 = require(\"./channel\");\nvar Session = /** @class */ (function () {\n    function Session(arr) {\n        arr = arr || [];\n        this.sessionChannels = arr.map(function (ch, i) {\n            ch.idx = ch.idx || i;\n            return new channel_1.Channel(ch);\n        });\n    }\n    Session.prototype.createChannel = function (ch) {\n        ch.idx = ch.idx || this.sessionChannels.length;\n        var newChannel = new channel_1.Channel(ch);\n        this.sessionChannels.push(newChannel);\n        return newChannel;\n    };\n    Object.defineProperty(Session.prototype, \"channels\", {\n        get: function () {\n            return this.sessionChannels;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Start the clips at a specific index in all the channels\n    Session.prototype.startRow = function (idx) {\n        this.sessionChannels.forEach(function (ch) {\n            ch.startClip(idx);\n        });\n    };\n    Session.prototype.play = function (params) {\n        var _this = this;\n        var channelPatterns = params.channelPatterns;\n        var clipDuration = params.clipDuration || '4:0:0';\n        var clipDurationInSeconds = Tone.Time(clipDuration).toSeconds();\n        var stopClips = function (clips, time) {\n            clips.map(function (c) { return c.stop(time); });\n        };\n        var startClips = function (channelIdx, clipIdx, time) {\n            return clipIdx === '-'\n                ? []\n                : _this.channels\n                    .filter(function (c) { return c.idx === channelIdx; })\n                    .map(function (c) { return c.clips[clipIdx].start(time); });\n        };\n        channelPatterns.forEach(function (_a) {\n            var channelIdx = _a.channelIdx, pattern = _a.pattern;\n            var clips = [];\n            var time = 0;\n            var prevClipIdx = '-';\n            pattern.split('').forEach(function (clipIdx) {\n                if (clipIdx !== prevClipIdx && clipIdx !== '_') {\n                    stopClips(clips, time);\n                    clips = startClips(channelIdx, clipIdx, time);\n                }\n                prevClipIdx = clipIdx;\n                time += clipDurationInSeconds;\n            });\n            stopClips(clips, time);\n        });\n    };\n    return Session;\n}());\nexports.Session = Session;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar clip_1 = require(\"./clip\");\n/**\n * Get the next logical position to play in the session\n * Tone has a build-in method `Tone.Transport.nextSubdivision('4n')`\n * but I think it s better to round off as follows for live performance\n */\nvar getNextPos = function () {\n    var arr = Tone.Transport.position.split(':');\n    // If we are still around 0:0:0x, then set start position to 0\n    if (arr[0] === '0' && arr[1] === '0') {\n        return 0;\n    }\n    // Else set it to the next bar\n    return +arr[0] + 1 + ':0:0';\n};\n/**\n * Channel\n * A channel is made up of a Tone.js Player/Instrument, one or more\n * Tone.js sequences (known as clips in Scribbletune)\n * & optionally a set of effects (with or without presets)\n *\n * API:\n * clips -> Get all clips for this channel\n * addClip -> Add a new clip to the channel\n * startClip -> Start a clip at the provided index\n * stopClip -> Stop a clip at the provided index\n * activeClipIdx -> Get the clip that is currently playing\n */\nvar Channel = /** @class */ (function () {\n    function Channel(params) {\n        var _this = this;\n        (this.idx = params.idx || 0), (this.activePatternIdx = -1);\n        this.channelClips = [];\n        if (params.sample) {\n            this.player = new Tone.Player(params.sample);\n        }\n        if (params.synth) {\n            this.instrument = new Tone[params.synth]();\n        }\n        if (params.samples) {\n            this.sampler = new Tone.Sampler(params.samples);\n        }\n        // Filter out unrequired params and create clip params object\n        var clips = params.clips, samples = params.samples, sample = params.sample, synth = params.synth, originalParamsFiltered = __rest(params, [\"clips\", \"samples\", \"sample\", \"synth\"]);\n        params.clips.forEach(function (c) {\n            _this.addClip(__assign(__assign({}, c), originalParamsFiltered));\n        }, this);\n    }\n    Object.defineProperty(Channel.prototype, \"clips\", {\n        get: function () {\n            return this.channelClips;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Channel.prototype.startClip = function (idx) {\n        // Stop any other currently running clip\n        if (this.activePatternIdx > -1 && this.activePatternIdx !== idx) {\n            this.stopClip(this.activePatternIdx);\n        }\n        if (this.channelClips[idx] && this.channelClips[idx].state !== 'started') {\n            this.activePatternIdx = idx;\n            this.channelClips[idx].start(getNextPos());\n        }\n    };\n    Channel.prototype.stopClip = function (idx) {\n        this.channelClips[idx].stop(getNextPos());\n    };\n    Channel.prototype.addClip = function (clipParams, idx) {\n        idx = idx || this.channelClips.length;\n        if (clipParams.pattern) {\n            this.channelClips[idx] = clip_1.clip(__assign({ player: this.player, instrument: this.instrument, sampler: this.sampler }, clipParams));\n        }\n        else {\n            // Allow creation of empty clips\n            this.channelClips[idx] = null;\n        }\n    };\n    Object.defineProperty(Channel.prototype, \"activeClipIdx\", {\n        get: function () {\n            return this.activePatternIdx;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Channel;\n}());\nexports.Channel = Channel;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsmidgen_1 = require(\"jsmidgen\");\n/**\n * Take an array of note objects to populate a clip selected in Ableton Live via Max4Live\n * @param  {<Array>NoteObject} notes    Notes are in the format: {note: ['c3'], level: 127, length: 64}\n */\nexports.max = function (notes, liveClip) {\n    if (liveClip === void 0) { liveClip = 'live_set view highlighted_clip_slot clip'; }\n    var liveObject = new LiveAPI(liveClip);\n    var totalLength = notes.reduce(function (a, b) {\n        return a + b.length;\n    }, 0);\n    liveObject.set('loop_end', totalLength / 512);\n    liveObject.call('remove_notes', 0, 1, 258, 127);\n    liveObject.call('set_notes');\n    var noteCount = notes.reduce(function (a, b) {\n        return (a = a + (b.note ? b.note.length : 0));\n    }, 0);\n    liveObject.call('notes', noteCount);\n    var cursor = 0;\n    notes.forEach(function (noteObj) {\n        if (noteObj.note) {\n            noteObj.note.forEach(function (n) {\n                liveObject.call('note', jsmidgen_1.Util.midiPitchFromNote(n), cursor.toFixed(2).toString(), (noteObj.length / 512).toFixed(2).toString(), noteObj.level || 100, 0);\n            });\n            cursor = cursor + noteObj.length / 512;\n        }\n        else {\n            cursor = cursor + noteObj.length / 512;\n        }\n    });\n    liveObject.call('done');\n};\n"],"sourceRoot":""}